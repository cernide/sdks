/**
 * Copyright 2018-2022 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/struct.proto";

option go_package = "v1/polyboard";

// Artifact kind
enum ArtifactKind {
    // Model asset/event
    model = 0;

    // Audio asset/event
    audio = 1;

    // Vidio asset/event
    video = 2;

    // Histogram asset/event
    histogram = 3;

    // Image asset/event
    image = 4;

    // Tensor asset/event
    tensor = 5;

    // Dataframe asset/event
    dataframe = 6;

    // plotly/bokeh/vega chart
    chart = 7;

    // Comma separated values
    csv = 8;

    // Tab separated values
    tsv = 9;

    // Pipe separated values
    psv = 10;

    // Space separated values
    ssv = 11;

    // Metric asset/event
    metric = 12;

    // Env file
    env = 13;

    // HTML asset/event
    html = 14;

    // Text asset/event
    text = 15;

    // File asset/lineage
    file = 16;

    // Dir asset/lineage
    dir = 17;

    // Dockerfile asset
    dockerfile = 18;

    // Docker image
    docker_image = 19;

    // Data asset/event
    data = 20;

    // Coderef lineage
    coderef = 21;

    // Table asset/event
    table = 22;

    // Tensorboard lineage
    tensorboard = 23;

    // Curve event
    curve = 24;

    // Confusion matrix event
    confusion = 25;

    // Analysis lineage
    analysis = 26;

    // Iteration lineage
    iteration = 27;

    // Mardown event
    markdown = 28;

    // System event
    system = 29;

    // Generic artifact
    artifact = 30;
}

// Run Artifact spec definition
message RunArtifact {
    // Artifact name
    string name = 1;

    // State
    string state = 2;

    // Artifact type
    ArtifactKind kind = 3;

    // Artifact path
    string path = 4;

    // Optional Connection
    string connection = 5;

    // Optional Run
    string run = 6;

    // Artifact schema
    google.protobuf.Struct summary = 7;

    // Optional flag to check the use of the artifact in a context
    bool is_input = 8;

    // Optional meta information
    google.protobuf.Struct meta_info = 9;
}

// Run Artifacts spec definition
message RunArtifacts {
    // Run Artifacts
    repeated RunArtifact artifacts = 1;
}

// Contains list of run artifacts
message ListRunArtifactsResponse {
    // Count of the entities
    int32 count = 1;

    // List of all entities
    repeated RunArtifact results = 2;

    // Previous page
    string previous = 3;

    // Next page
    string next = 4;
}


// Request data to create run artifacts
message RunArtifactsRequest {
    // Owner of the namespace
    string owner = 1;

    // Project where the run will be assigned
    string project = 2;

    // Uuid identifier of the entity
    string uuid = 3;

    // Run Artifacts
    RunArtifacts artifacts = 4;
}


// Request data to create/update run artifact
message RunArtifactBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Project where the run will be assigned
    string project = 2;

    // Uuid identifier of the entity
    string uuid = 3;

    // Run Artifact
    RunArtifact artifact = 4;
}

// Request data to post/pach/get/delete run artifact lineage
message RunArtifactLineageRequest {
    // namespace
    string namespace = 1;

    // Owner of the namespace
    string owner = 2;

    // Project where the run will be assigned
    string project = 3;

    // Uuid identifier of the entity
    string uuid = 4;

    // Artifact name
    string name = 5;
}


// Request data to get run artifacts tree
message RunArtifactsPathRequest {
    // namespace
    string namespace = 1;

    // Owner of the namespace
    string owner = 2;

    // Project where the run will be assigned
    string project = 3;

    // Uuid identifier of the entity
    string uuid = 4;

    // Path query param
    string path = 5;
}

// Request data to get/delete run event
message RunEventRequest {
    // namespace
    string namespace = 1;

    // Owner of the namespace
    string owner = 2;

    // Project where the run will be assigned
    string project = 3;

    // Uuid identifier of the entity
    string uuid = 4;

    // The artifact kind
    ArtifactKind kind = 5;

    // Names query param
    string names = 6;

    // Orient query param
    string orient = 7;

    // Force query param
    bool force = 8;

    // Sample query param
    int32 sample = 9;
}

// Request data to get/delete runs' events
message RunEventsRequest {
    // namespace
    string namespace = 1;

    // Owner of the namespace
    string owner = 2;

    // Project where the run will be assigned
    string project = 3;

    // The artifact kind
    ArtifactKind kind = 4;

    // Names query param
    string names = 5;

    // Runs query param
    string runs = 6;

    // Orient query param
    string orient = 7;

    // Force query param
    bool force = 8;

    // Sample query param
    int32 sample = 9;
}

// Request data to get/delete run resources
message RunResourcesRequest {
    // namespace
    string namespace = 1;

    // Owner of the namespace
    string owner = 2;

    // Project where the run will be assigned
    string project = 3;

    // Uuid identifier of the entity
    string uuid = 4;

    // Names query param
    string names = 5;

    // Query param flag to tail the values
    bool tail = 6;

    // Force query param
    bool force = 7;

    // Sample query param
    int32 sample = 8;
}
