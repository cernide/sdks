/**
 * Copyright 2018-2021 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/struct.proto";

import "v1/polyflow/io.proto";
import "v1/polyflow/optimization.proto";

option go_package = "v1/polyflow";

enum MatrixKind {
    random = 0;
    grid = 1;
    hyperband = 2;
    bayes = 3;
    hyperopt = 4;
    iterative = 5;
    mapping = 6;
}

// Matrix based on randomly generated search space
message RandomSearch {
    // Kind of matrix, should be equal to "random"
    string kind = 1;

    // Hyperparams/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 2;

    // Number of runs to generate and search
    int32 numRuns = 3;

    // Seed for the random generator
    int32 seed = 4;

    // Number of concurrent runs
    int32 concurrency = 5;

    // A list of Early stoppings, accpets both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 6;
}


// Matrix based on grid/cartesian product generated search space
message GridSearch {
    // Kind of matrix, should be equal to "grid"
    string kind = 1;

    // Hyperparams/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 2;

    // Number of runs to generate and search
    int32 numRuns = 3;

    // Seed for the random generator
    int32 seed = 4;

    // Number of concurrent runs
    int32 concurrency = 5;

    // A list of Early stopping objects, accpets both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 6;
}

// Tuner definition
message Tuner {
  // Component name to use
  string hubRef = 1;

  // Optional queue to use for scheduling the tuner
  string queue = 2;

  // Optional list of presets to use for running this tuner
  repeated string presets = 3;

  // Optional dict of params
  map<string, Param> params = 4;
}

// Matrix based on hyperband
message Hyperband {
    // Kind of matrix, should be equal to "hyperband"
    string kind = 1;

    // Hyperparams/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 2;

    // Maximim number of iteration to produce new observations
    int32 maxIterations = 3;

    // Eta
    int32 eta = 4;

    // Resource to optimize (should be an integer or a float)
    OptimizationResource resource = 5;

    // Metric to optimize during the iterations
    OptimizationMetric metric = 6;

    // A flag to resume or restart the selected runs
    bool resume = 7;

    // Seed for the random generator
    int32 seed = 8;

    // Number of concurrent runs
    int32 concurrency = 9;

    // Tuner reference (hubRef) to use
    Tuner tuner = 10;

    // A list of Early stopping objects, accpets both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 11;
}


// Matrix based on Bayesian Optimization
message Bayes {
    // Kind of matrix, should be equal to "bayes"
    string kind = 1;

    // Hyperparams/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 2;

    // Number of intial random observations to create
    int32 numInitialRuns = 3;

    // Maximim number of iteration to produce new observations
    int32 maxIterations = 4;

    // A utility function to use for the bayesian optimization
    google.protobuf.Struct utilityFunction = 5;

    // Metric to optimize during the iterations
    OptimizationMetric metric = 6;

    // Seed for the random generator
    int32 seed = 7;

    // Number of concurrent runs
    int32 concurrency = 8;

    // Tuner reference (hubRef) to use
    Tuner tuner = 9;

    // A list of Early stopping objects, accpets both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 110;
}


// Hyperopt algorithms enum
enum HyperoptAlgorithms {
    // tpe algorithm
    tpe = 0;

    // random algorithm
    rand = 1;

    // anneal algorithm
    anneal = 2;
}

// Matrix based on hyperopt
message Hyperopt {
    // Kind of matrix, should be equal to "hyperopt"
    string kind = 1;

    // Algorithm to use from the hyperopt library
    HyperoptAlgorithms algorithm = 2;

    // Hyperparams/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 3;

    // Number of runs to generate and search
    int32 numRuns = 4;

    // Maximum number of iteration to produce new observations
    int32 maxIterations = 5;

    // Metric to optimize during the iterations
    OptimizationMetric metric = 6;

    // Seed for the random generator
    int32 seed = 7;

    // Number of concurrent runs
    int32 concurrency = 8;

    // Tuner reference (hubRef) to use
    Tuner tuner = 9;

    // A list of Early stopping objects, accepts both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 10;
}


// Matrix based on a custom iterative algorithm (suggestions -> mapping -> reduce -> repeat)
message Iterative {
    // Kind of matrix, should be equal to "iterative"
    string kind = 1;

    // Hyperparam/Space definition of params to traverse
    map<string, google.protobuf.Struct> params = 2;

    // Maximum number of iteration to produce new observations
    int32 maxIterations = 3;

    // Seed for the random generator
    int32 seed = 4;

    // Number of concurrent runs
    int32 concurrency = 5;

    // Tuner reference (hubRef) to use
    Tuner tuner = 6;

    // A list of Early stopping objects, accepts both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 7;
}


// Matrix based on map/array either specified manually by the user or passed from another step
message Mapping {
    // Kind of matrix, should be equal to "mapping"
    string kind = 1;

    // The mapping values
    repeated google.protobuf.Struct values = 2;

    // Number of concurrent runs
    int32 concurrency = 6;

    // A list of Early stopping objects, accpets both metric and failure early stopping mechanisms
    repeated google.protobuf.Struct earlyStopping = 7;
}

// All Schemas message
message Matrix {
    oneof matrix {
        RandomSearch random = 1;
        GridSearch grid = 2;
        Hyperband hyperband = 3;
        Bayes bayes = 4;
        Hyperopt hyperopt = 5;
        Iterative iterative = 6;
        Mapping mapping = 7;
    }
}
