/**
 * Copyright 2018-2021 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "v1/polyflow/environment.proto";
import "v1/polyflow/init.proto";
import "v1/polyflow/k8s.proto";

option go_package = "v1/polyflow";

message SchedulingPolicy {
  	int32 minAvailable = 1;
	  string queue = 2;
	  string priorityClass = 3;
}

// Distributed Replica specification
message KFReplica {
    // Number of replicas
    int32 replicas = 1;

    // Optional environment section
    Environment environment = 2;

    // Optional connections section
    repeated string connections = 3;

    // Optional connections section
    repeated Volume volumes = 4;

    // Optional init connections section
    repeated Init init = 5;

    // Optional sidecars section
    repeated Container sidecars = 6;

    // Optional container to run
    Container container = 7;
}

// CleanPodPolicy
enum CleanPodPolicy {
	All = 0;
	Running = 1;
	None = 2;
}

// MPI Job specification
message MPIJob {
    // Optional component kind, should be equal to 'mpi_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Optional slots per worker
    int32 slotsPerWorker = 4;

    // Optional launcher replica definition
    KFReplica launcher = 5;

    // Optional worker replica definition
    KFReplica worker = 6;
}

// Pytorch Job specification
message PytorchJob {
    // Optional component kind, should be equal to 'pytorch_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Optional master replica definition
    KFReplica master = 4;

    // Optional worker replica definition
    KFReplica worker = 5;
}

// TF Job specification
message TFJob {
    // Optional component kind, should be equal to 'pytorch_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Optional chief replica definition
    KFReplica chief = 4;

    // Optional ps replica definition
    KFReplica ps = 5;

    // Optional worker replica definition
    KFReplica worker = 6;

    // Optional evaluator replica definition
    KFReplica evaluator = 7;
}
