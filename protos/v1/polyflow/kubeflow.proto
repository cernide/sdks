/**
 * Copyright 2018-2021 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "v1/polyflow/environment.proto";
import "v1/polyflow/init.proto";
import "v1/polyflow/k8s.proto";

option go_package = "v1/polyflow";

message SchedulingPolicy {
  	int32 minAvailable = 1;
	  string queue = 2;
	  string priorityClass = 3;
}

// Distributed Replica specification
message KFReplica {
    // Number of replicas
    int32 replicas = 1;

    // Optional environment section
    Environment environment = 2;

    // Optional connections section
    repeated string connections = 3;

    // Optional connections section
    repeated Volume volumes = 4;

    // Optional init connections section
    repeated Init init = 5;

    // Optional sidecars section
    repeated Container sidecars = 6;

    // Optional container to run
    Container container = 7;
}

// CleanPodPolicy
enum CleanPodPolicy {
	All = 0;
	Running = 1;
	None = 2;
}

// MPI Job specification
message MPIJob {

    enum Implementation {
      OpenMPI = 0;
      Intel = 1;
    }

    // Optional component kind, should be equal to 'mpi_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Optional is the directory where SSH keys are mounted, default "/root/.ssh"
    string sshAuthMountPath = 4;

    // MPI implementation, options are "OpenMPI" (default) and "Intel".
    Implementation implementation = 5;

    // Optional slots per worker
    int32 slotsPerWorker = 6;

    // Template replicas definition
    KFReplica template = 7;

    // Worker replicas definition
    KFReplica worker = 8;

    // Launcher replicas definition
    KFReplica launcher = 9;
}

// Pytorch Job specification
message PytorchJob {
    // Optional component kind, should be equal to 'pytorch_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Template replicas definition
    KFReplica template = 4;

    // Master replicas definition
    KFReplica master = 5;

    // Worker replicas definition
    KFReplica worker = 6;
}

// TF Job specification
message TFJob {
    // Optional component kind, should be equal to 'tf_job'
    string kind = 1;

    // optional clean pod policy section
    CleanPodPolicy cleanPodPolicy = 2;

    // optional scheduling policy section
    SchedulingPolicy schedulingPolicy = 3;

    // Template replicas definition
    KFReplica template = 4;

    // Chief replicas definition
    KFReplica chief = 5;

    // Worker replicas definition
    KFReplica worker = 6;

    // PS replicas definition
    KFReplica ps = 7;

    // Evaluator replicas definition
    KFReplica evaluator = 8;
}

// MXNet Job specification
message MXJob {

  enum Mode {
    // Train Mode, requires Server, Scheduler, Worker
    MXTrain = 0;
    // Tune Mode, requires Tuner
    MXTune = 1;
  }

  // Optional component kind, should be equal to 'mx_job'
  string kind = 1;

  // optional clean pod policy section
  CleanPodPolicy cleanPodPolicy = 2;

  // optional scheduling policy section
  SchedulingPolicy schedulingPolicy = 3;

  // MXJob mode "MXTrain" and "MXTune".
  Mode mode = 4;

  // Template replicas definition
  KFReplica template = 5;

  // Scheduler replicas definition
  KFReplica scheduler = 6;

  // Server replicas definition
  KFReplica server = 7;

  // Worker replicas definition
  KFReplica worker = 8;

  // TunerTracker replicas definition
  KFReplica tuner_tracker = 9;

  // TunerServer replicas definition
  KFReplica tuner_server = 10;

  // Tuner replicas definition
  KFReplica tuner = 11;
}

// XGBoost Job specification
message XGBoostJob {
  // Optional component kind, should be equal to 'xgboost_job'
  string kind = 1;

  // optional clean pod policy section
  CleanPodPolicy cleanPodPolicy = 2;

  // optional scheduling policy section
  SchedulingPolicy schedulingPolicy = 3;

  // Template replicas definition
  KFReplica template = 4;

  // Master replicas definition
  KFReplica master = 5;

  // Worker replicas definition
  KFReplica worker = 6;
}
