syntax = "proto3";

package v1;

import "google/protobuf/struct.proto";

import "v1/flow/optimization.proto";

option go_package = "v1/flow";

// Early stopping with median stopping, this policy computes running medians across
// all runs and stops those whose best performance is worse than the median
// of the running runs.
message MedianStoppingPolicy {
    // Kind of this stopping policy, should be equal to "median"
    string kind = 1;

    // Interval/Frequency for applying the policy.
    int32 evaluationInterval = 2;

    // Min interval (e.g steps) before starting the process
    int32 minInterval = 3;

    // Min samples runs succeeded before starting the process
    int32 minSamples = 4;
}

// Early stopping with diff factor stopping, this policy computes checks runs against the best run
// and stops those whose performance is worse than the best by the factor defined by the user.
message DiffStoppingPolicy {
    // Kind of this stopping policy, should be equal to "average"
    string kind = 1;

    // The diff factor, if not given than a zero tolerance policy is applied
    float percent = 2;

    // Interval/Frequency for applying the policy.
    int32 evaluationInterval = 3;

    // Min interval (e.g steps) before starting the process
    int32 minInterval = 4;

    // Min samples runs succeeded before starting the process
    int32 minSamples = 5;

}

// Early stopping with truncation stopping, this policy stops a percentage of
// all running runs at every evaluation.
message TruncationStoppingPolicy {
    // Kind of this stopping policy, should be equal to "truncation"
    string kind = 1;

    // The percentage of runs to stop, at each evaluation interval.
    // e.g. 1 - 99.
    int32 percent = 2;

    // Interval/Frequency for applying the policy.
    int32 evaluationInterval = 3;

    // Min interval (e.g steps) before starting the process
    int32 minInterval = 4;

    // Min samples runs succeeded before starting the process
    int32 minSamples = 5;

    // Flag to include or not the succeeded runs in the calculation
    bool includeSucceeded = 6;
}

// MetricEarlyStoppingSchema specification
// Early stopping based on metric config.
message MetricEarlyStopping {
    // Kind of this metric early stopping policy, should be equal to "metric_early_stopping"
    string kind = 1;

    // Metric name to use for early stopping.
    string metric = 2;

    // Metric value to use for the condition.
    string value = 3;

    // Optimization to do: maximize or minimize.
    Optimization optimization = 4;

    // Policy to use, should be one of the stopping policies:
    // MedianStoppingPolicy, AverageStoppingPolicy, TruncationStoppingPolicy
    google.protobuf.Struct policy = 5;
}


// FailureEarlyStoppingSchema specification
// Early stopping based on failure config.
// this policy stops based on a percentage of
// failed runs at every evaluation.
message FailureEarlyStopping {
    // Kind of this metric early stopping policy, should be equal to "failure_early_stopping"
    string kind = 1;

    // The percentage of failed runs, at each evaluation interval.
    // e.g. 1 - 99.
    int32 percent = 2;
}


// All Schemas message
message EarlyStopping {
    oneof earlyStopping {
        MedianStoppingPolicy median = 1;
        DiffStoppingPolicy diff = 2;
        TruncationStoppingPolicy truncation = 3;
        MetricEarlyStopping metric = 4;
        FailureEarlyStopping failure = 5;
    }
}
