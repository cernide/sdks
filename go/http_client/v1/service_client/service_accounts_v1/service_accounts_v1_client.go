// Code generated by go-swagger; DO NOT EDIT.

package service_accounts_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service accounts v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service accounts v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, *CreateServiceAccountNoContent, error)

	CreateServiceAccountToken(params *CreateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountTokenOK, *CreateServiceAccountTokenNoContent, error)

	DeleteServiceAccount(params *DeleteServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountOK, *DeleteServiceAccountNoContent, error)

	DeleteServiceAccountToken(params *DeleteServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountTokenOK, *DeleteServiceAccountTokenNoContent, error)

	GetServiceAccount(params *GetServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountOK, *GetServiceAccountNoContent, error)

	GetServiceAccountToken(params *GetServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountTokenOK, *GetServiceAccountTokenNoContent, error)

	ListServiceAccountNames(params *ListServiceAccountNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountNamesOK, *ListServiceAccountNamesNoContent, error)

	ListServiceAccountTokens(params *ListServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountTokensOK, *ListServiceAccountTokensNoContent, error)

	ListServiceAccounts(params *ListServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountsOK, *ListServiceAccountsNoContent, error)

	PatchServiceAccount(params *PatchServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchServiceAccountOK, *PatchServiceAccountNoContent, error)

	PatchServiceAccountToken(params *PatchServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchServiceAccountTokenOK, *PatchServiceAccountTokenNoContent, error)

	UpdateServiceAccount(params *UpdateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountOK, *UpdateServiceAccountNoContent, error)

	UpdateServiceAccountToken(params *UpdateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountTokenOK, *UpdateServiceAccountTokenNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateServiceAccount creates service account
*/
func (a *Client) CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, *CreateServiceAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/sa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateServiceAccountOK:
		return value, nil, nil
	case *CreateServiceAccountNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceAccountDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateServiceAccountToken creates service account token
*/
func (a *Client) CreateServiceAccountToken(params *CreateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountTokenOK, *CreateServiceAccountTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceAccountTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateServiceAccountToken",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{entity}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateServiceAccountTokenOK:
		return value, nil, nil
	case *CreateServiceAccountTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceAccountTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceAccount deletes service account
*/
func (a *Client) DeleteServiceAccount(params *DeleteServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountOK, *DeleteServiceAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteServiceAccountOK:
		return value, nil, nil
	case *DeleteServiceAccountNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceAccountDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceAccountToken deletes service account token
*/
func (a *Client) DeleteServiceAccountToken(params *DeleteServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountTokenOK, *DeleteServiceAccountTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceAccountTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteServiceAccountToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{entity}/tokens/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteServiceAccountTokenOK:
		return value, nil, nil
	case *DeleteServiceAccountTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceAccountTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceAccount gets service account
*/
func (a *Client) GetServiceAccount(params *GetServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountOK, *GetServiceAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetServiceAccountOK:
		return value, nil, nil
	case *GetServiceAccountNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceAccountDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceAccountToken gets service account token
*/
func (a *Client) GetServiceAccountToken(params *GetServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountTokenOK, *GetServiceAccountTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceAccountTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServiceAccountToken",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{entity}/tokens/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetServiceAccountTokenOK:
		return value, nil, nil
	case *GetServiceAccountTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceAccountTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServiceAccountNames lists service accounts names
*/
func (a *Client) ListServiceAccountNames(params *ListServiceAccountNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountNamesOK, *ListServiceAccountNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServiceAccountNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/sa/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListServiceAccountNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListServiceAccountNamesOK:
		return value, nil, nil
	case *ListServiceAccountNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceAccountNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServiceAccountTokens lists service account tokens
*/
func (a *Client) ListServiceAccountTokens(params *ListServiceAccountTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountTokensOK, *ListServiceAccountTokensNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServiceAccountTokens",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{uuid}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListServiceAccountTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListServiceAccountTokensOK:
		return value, nil, nil
	case *ListServiceAccountTokensNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceAccountTokensDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServiceAccounts lists service accounts
*/
func (a *Client) ListServiceAccounts(params *ListServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountsOK, *ListServiceAccountsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServiceAccounts",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/sa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListServiceAccountsOK:
		return value, nil, nil
	case *ListServiceAccountsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceAccountsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchServiceAccount patches service account
*/
func (a *Client) PatchServiceAccount(params *PatchServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchServiceAccountOK, *PatchServiceAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchServiceAccount",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{sa.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchServiceAccountOK:
		return value, nil, nil
	case *PatchServiceAccountNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchServiceAccountDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchServiceAccountToken patches service account token
*/
func (a *Client) PatchServiceAccountToken(params *PatchServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchServiceAccountTokenOK, *PatchServiceAccountTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchServiceAccountTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchServiceAccountToken",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchServiceAccountTokenOK:
		return value, nil, nil
	case *PatchServiceAccountTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchServiceAccountTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceAccount updates service account
*/
func (a *Client) UpdateServiceAccount(params *UpdateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountOK, *UpdateServiceAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateServiceAccount",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{sa.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceAccountOK:
		return value, nil, nil
	case *UpdateServiceAccountNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceAccountDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceAccountToken updates service account token
*/
func (a *Client) UpdateServiceAccountToken(params *UpdateServiceAccountTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountTokenOK, *UpdateServiceAccountTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceAccountTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateServiceAccountToken",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateServiceAccountTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceAccountTokenOK:
		return value, nil, nil
	case *UpdateServiceAccountTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceAccountTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
