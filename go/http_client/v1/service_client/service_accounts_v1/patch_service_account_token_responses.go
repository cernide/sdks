// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_accounts_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchServiceAccountTokenReader is a Reader for the PatchServiceAccountToken structure.
type PatchServiceAccountTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchServiceAccountTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchServiceAccountTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchServiceAccountTokenNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchServiceAccountTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchServiceAccountTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchServiceAccountTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchServiceAccountTokenOK creates a PatchServiceAccountTokenOK with default headers values
func NewPatchServiceAccountTokenOK() *PatchServiceAccountTokenOK {
	return &PatchServiceAccountTokenOK{}
}

/* PatchServiceAccountTokenOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchServiceAccountTokenOK struct {
	Payload *service_model.V1Token
}

func (o *PatchServiceAccountTokenOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}][%d] patchServiceAccountTokenOK  %+v", 200, o.Payload)
}
func (o *PatchServiceAccountTokenOK) GetPayload() *service_model.V1Token {
	return o.Payload
}

func (o *PatchServiceAccountTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Token)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountTokenNoContent creates a PatchServiceAccountTokenNoContent with default headers values
func NewPatchServiceAccountTokenNoContent() *PatchServiceAccountTokenNoContent {
	return &PatchServiceAccountTokenNoContent{}
}

/* PatchServiceAccountTokenNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchServiceAccountTokenNoContent struct {
	Payload interface{}
}

func (o *PatchServiceAccountTokenNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}][%d] patchServiceAccountTokenNoContent  %+v", 204, o.Payload)
}
func (o *PatchServiceAccountTokenNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountTokenNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountTokenForbidden creates a PatchServiceAccountTokenForbidden with default headers values
func NewPatchServiceAccountTokenForbidden() *PatchServiceAccountTokenForbidden {
	return &PatchServiceAccountTokenForbidden{}
}

/* PatchServiceAccountTokenForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchServiceAccountTokenForbidden struct {
	Payload interface{}
}

func (o *PatchServiceAccountTokenForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}][%d] patchServiceAccountTokenForbidden  %+v", 403, o.Payload)
}
func (o *PatchServiceAccountTokenForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountTokenNotFound creates a PatchServiceAccountTokenNotFound with default headers values
func NewPatchServiceAccountTokenNotFound() *PatchServiceAccountTokenNotFound {
	return &PatchServiceAccountTokenNotFound{}
}

/* PatchServiceAccountTokenNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchServiceAccountTokenNotFound struct {
	Payload interface{}
}

func (o *PatchServiceAccountTokenNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}][%d] patchServiceAccountTokenNotFound  %+v", 404, o.Payload)
}
func (o *PatchServiceAccountTokenNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountTokenDefault creates a PatchServiceAccountTokenDefault with default headers values
func NewPatchServiceAccountTokenDefault(code int) *PatchServiceAccountTokenDefault {
	return &PatchServiceAccountTokenDefault{
		_statusCode: code,
	}
}

/* PatchServiceAccountTokenDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchServiceAccountTokenDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch service account token default response
func (o *PatchServiceAccountTokenDefault) Code() int {
	return o._statusCode
}

func (o *PatchServiceAccountTokenDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}][%d] PatchServiceAccountToken default  %+v", o._statusCode, o.Payload)
}
func (o *PatchServiceAccountTokenDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchServiceAccountTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
