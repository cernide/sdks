// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_accounts_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchServiceAccountReader is a Reader for the PatchServiceAccount structure.
type PatchServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchServiceAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchServiceAccountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchServiceAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchServiceAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchServiceAccountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchServiceAccountOK creates a PatchServiceAccountOK with default headers values
func NewPatchServiceAccountOK() *PatchServiceAccountOK {
	return &PatchServiceAccountOK{}
}

/* PatchServiceAccountOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchServiceAccountOK struct {
	Payload *service_model.V1ServiceAccount
}

func (o *PatchServiceAccountOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{sa.uuid}][%d] patchServiceAccountOK  %+v", 200, o.Payload)
}
func (o *PatchServiceAccountOK) GetPayload() *service_model.V1ServiceAccount {
	return o.Payload
}

func (o *PatchServiceAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ServiceAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountNoContent creates a PatchServiceAccountNoContent with default headers values
func NewPatchServiceAccountNoContent() *PatchServiceAccountNoContent {
	return &PatchServiceAccountNoContent{}
}

/* PatchServiceAccountNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchServiceAccountNoContent struct {
	Payload interface{}
}

func (o *PatchServiceAccountNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{sa.uuid}][%d] patchServiceAccountNoContent  %+v", 204, o.Payload)
}
func (o *PatchServiceAccountNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountForbidden creates a PatchServiceAccountForbidden with default headers values
func NewPatchServiceAccountForbidden() *PatchServiceAccountForbidden {
	return &PatchServiceAccountForbidden{}
}

/* PatchServiceAccountForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchServiceAccountForbidden struct {
	Payload interface{}
}

func (o *PatchServiceAccountForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{sa.uuid}][%d] patchServiceAccountForbidden  %+v", 403, o.Payload)
}
func (o *PatchServiceAccountForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountNotFound creates a PatchServiceAccountNotFound with default headers values
func NewPatchServiceAccountNotFound() *PatchServiceAccountNotFound {
	return &PatchServiceAccountNotFound{}
}

/* PatchServiceAccountNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchServiceAccountNotFound struct {
	Payload interface{}
}

func (o *PatchServiceAccountNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{sa.uuid}][%d] patchServiceAccountNotFound  %+v", 404, o.Payload)
}
func (o *PatchServiceAccountNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchServiceAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServiceAccountDefault creates a PatchServiceAccountDefault with default headers values
func NewPatchServiceAccountDefault(code int) *PatchServiceAccountDefault {
	return &PatchServiceAccountDefault{
		_statusCode: code,
	}
}

/* PatchServiceAccountDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchServiceAccountDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch service account default response
func (o *PatchServiceAccountDefault) Code() int {
	return o._statusCode
}

func (o *PatchServiceAccountDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/sa/{sa.uuid}][%d] PatchServiceAccount default  %+v", o._statusCode, o.Payload)
}
func (o *PatchServiceAccountDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchServiceAccountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
