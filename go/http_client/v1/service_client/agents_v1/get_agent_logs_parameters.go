// Code generated by go-swagger; DO NOT EDIT.

package agents_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAgentLogsParams creates a new GetAgentLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAgentLogsParams() *GetAgentLogsParams {
	return &GetAgentLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAgentLogsParamsWithTimeout creates a new GetAgentLogsParams object
// with the ability to set a timeout on a request.
func NewGetAgentLogsParamsWithTimeout(timeout time.Duration) *GetAgentLogsParams {
	return &GetAgentLogsParams{
		timeout: timeout,
	}
}

// NewGetAgentLogsParamsWithContext creates a new GetAgentLogsParams object
// with the ability to set a context for a request.
func NewGetAgentLogsParamsWithContext(ctx context.Context) *GetAgentLogsParams {
	return &GetAgentLogsParams{
		Context: ctx,
	}
}

// NewGetAgentLogsParamsWithHTTPClient creates a new GetAgentLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAgentLogsParamsWithHTTPClient(client *http.Client) *GetAgentLogsParams {
	return &GetAgentLogsParams{
		HTTPClient: client,
	}
}

/*
GetAgentLogsParams contains all the parameters to send to the API endpoint

	for the get agent logs operation.

	Typically these are written to a http.Request.
*/
type GetAgentLogsParams struct {

	/* Connection.

	   Connection to use.
	*/
	Connection *string

	/* Force.

	   Force query param.
	*/
	Force *bool

	/* LastFile.

	   last_file.
	*/
	LastFile *string

	/* Namespace.

	   namespace
	*/
	Namespace string

	/* Owner.

	   Owner of the namespace
	*/
	Owner string

	/* Service.

	   Service.
	*/
	Service *string

	/* UUID.

	   Uuid identifier of the entity
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get agent logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAgentLogsParams) WithDefaults() *GetAgentLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get agent logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAgentLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get agent logs params
func (o *GetAgentLogsParams) WithTimeout(timeout time.Duration) *GetAgentLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get agent logs params
func (o *GetAgentLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get agent logs params
func (o *GetAgentLogsParams) WithContext(ctx context.Context) *GetAgentLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get agent logs params
func (o *GetAgentLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get agent logs params
func (o *GetAgentLogsParams) WithHTTPClient(client *http.Client) *GetAgentLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get agent logs params
func (o *GetAgentLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnection adds the connection to the get agent logs params
func (o *GetAgentLogsParams) WithConnection(connection *string) *GetAgentLogsParams {
	o.SetConnection(connection)
	return o
}

// SetConnection adds the connection to the get agent logs params
func (o *GetAgentLogsParams) SetConnection(connection *string) {
	o.Connection = connection
}

// WithForce adds the force to the get agent logs params
func (o *GetAgentLogsParams) WithForce(force *bool) *GetAgentLogsParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the get agent logs params
func (o *GetAgentLogsParams) SetForce(force *bool) {
	o.Force = force
}

// WithLastFile adds the lastFile to the get agent logs params
func (o *GetAgentLogsParams) WithLastFile(lastFile *string) *GetAgentLogsParams {
	o.SetLastFile(lastFile)
	return o
}

// SetLastFile adds the lastFile to the get agent logs params
func (o *GetAgentLogsParams) SetLastFile(lastFile *string) {
	o.LastFile = lastFile
}

// WithNamespace adds the namespace to the get agent logs params
func (o *GetAgentLogsParams) WithNamespace(namespace string) *GetAgentLogsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get agent logs params
func (o *GetAgentLogsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOwner adds the owner to the get agent logs params
func (o *GetAgentLogsParams) WithOwner(owner string) *GetAgentLogsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get agent logs params
func (o *GetAgentLogsParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithService adds the service to the get agent logs params
func (o *GetAgentLogsParams) WithService(service *string) *GetAgentLogsParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get agent logs params
func (o *GetAgentLogsParams) SetService(service *string) {
	o.Service = service
}

// WithUUID adds the uuid to the get agent logs params
func (o *GetAgentLogsParams) WithUUID(uuid string) *GetAgentLogsParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get agent logs params
func (o *GetAgentLogsParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAgentLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Connection != nil {

		// query param connection
		var qrConnection string

		if o.Connection != nil {
			qrConnection = *o.Connection
		}
		qConnection := qrConnection
		if qConnection != "" {

			if err := r.SetQueryParam("connection", qConnection); err != nil {
				return err
			}
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	if o.LastFile != nil {

		// query param last_file
		var qrLastFile string

		if o.LastFile != nil {
			qrLastFile = *o.LastFile
		}
		qLastFile := qrLastFile
		if qLastFile != "" {

			if err := r.SetQueryParam("last_file", qLastFile); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
