// Code generated by go-swagger; DO NOT EDIT.

package users_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// PatchTokenReader is a Reader for the PatchToken structure.
type PatchTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchTokenNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchTokenOK creates a PatchTokenOK with default headers values
func NewPatchTokenOK() *PatchTokenOK {
	return &PatchTokenOK{}
}

/*
PatchTokenOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchTokenOK struct {
	Payload *service_model.V1Token
}

// IsSuccess returns true when this patch token o k response has a 2xx status code
func (o *PatchTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch token o k response has a 3xx status code
func (o *PatchTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch token o k response has a 4xx status code
func (o *PatchTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch token o k response has a 5xx status code
func (o *PatchTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch token o k response a status code equal to that given
func (o *PatchTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch token o k response
func (o *PatchTokenOK) Code() int {
	return 200
}

func (o *PatchTokenOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenOK  %+v", 200, o.Payload)
}

func (o *PatchTokenOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenOK  %+v", 200, o.Payload)
}

func (o *PatchTokenOK) GetPayload() *service_model.V1Token {
	return o.Payload
}

func (o *PatchTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Token)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTokenNoContent creates a PatchTokenNoContent with default headers values
func NewPatchTokenNoContent() *PatchTokenNoContent {
	return &PatchTokenNoContent{}
}

/*
PatchTokenNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchTokenNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch token no content response has a 2xx status code
func (o *PatchTokenNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch token no content response has a 3xx status code
func (o *PatchTokenNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch token no content response has a 4xx status code
func (o *PatchTokenNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch token no content response has a 5xx status code
func (o *PatchTokenNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch token no content response a status code equal to that given
func (o *PatchTokenNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the patch token no content response
func (o *PatchTokenNoContent) Code() int {
	return 204
}

func (o *PatchTokenNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenNoContent  %+v", 204, o.Payload)
}

func (o *PatchTokenNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenNoContent  %+v", 204, o.Payload)
}

func (o *PatchTokenNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTokenNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTokenForbidden creates a PatchTokenForbidden with default headers values
func NewPatchTokenForbidden() *PatchTokenForbidden {
	return &PatchTokenForbidden{}
}

/*
PatchTokenForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchTokenForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch token forbidden response has a 2xx status code
func (o *PatchTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch token forbidden response has a 3xx status code
func (o *PatchTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch token forbidden response has a 4xx status code
func (o *PatchTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch token forbidden response has a 5xx status code
func (o *PatchTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch token forbidden response a status code equal to that given
func (o *PatchTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch token forbidden response
func (o *PatchTokenForbidden) Code() int {
	return 403
}

func (o *PatchTokenForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenForbidden  %+v", 403, o.Payload)
}

func (o *PatchTokenForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenForbidden  %+v", 403, o.Payload)
}

func (o *PatchTokenForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTokenNotFound creates a PatchTokenNotFound with default headers values
func NewPatchTokenNotFound() *PatchTokenNotFound {
	return &PatchTokenNotFound{}
}

/*
PatchTokenNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchTokenNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch token not found response has a 2xx status code
func (o *PatchTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch token not found response has a 3xx status code
func (o *PatchTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch token not found response has a 4xx status code
func (o *PatchTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch token not found response has a 5xx status code
func (o *PatchTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch token not found response a status code equal to that given
func (o *PatchTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch token not found response
func (o *PatchTokenNotFound) Code() int {
	return 404
}

func (o *PatchTokenNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenNotFound  %+v", 404, o.Payload)
}

func (o *PatchTokenNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] patchTokenNotFound  %+v", 404, o.Payload)
}

func (o *PatchTokenNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTokenDefault creates a PatchTokenDefault with default headers values
func NewPatchTokenDefault(code int) *PatchTokenDefault {
	return &PatchTokenDefault{
		_statusCode: code,
	}
}

/*
PatchTokenDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchTokenDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this patch token default response has a 2xx status code
func (o *PatchTokenDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch token default response has a 3xx status code
func (o *PatchTokenDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch token default response has a 4xx status code
func (o *PatchTokenDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch token default response has a 5xx status code
func (o *PatchTokenDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch token default response a status code equal to that given
func (o *PatchTokenDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch token default response
func (o *PatchTokenDefault) Code() int {
	return o._statusCode
}

func (o *PatchTokenDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] PatchToken default  %+v", o._statusCode, o.Payload)
}

func (o *PatchTokenDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/users/tokens/{token.uuid}][%d] PatchToken default  %+v", o._statusCode, o.Payload)
}

func (o *PatchTokenDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
