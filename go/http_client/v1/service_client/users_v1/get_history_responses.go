// Code generated by go-swagger; DO NOT EDIT.

package users_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// GetHistoryReader is a Reader for the GetHistory structure.
type GetHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetHistoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHistoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHistoryOK creates a GetHistoryOK with default headers values
func NewGetHistoryOK() *GetHistoryOK {
	return &GetHistoryOK{}
}

/*
GetHistoryOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetHistoryOK struct {
	Payload *service_model.V1ListActivitiesResponse
}

// IsSuccess returns true when this get history o k response has a 2xx status code
func (o *GetHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get history o k response has a 3xx status code
func (o *GetHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get history o k response has a 4xx status code
func (o *GetHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get history o k response has a 5xx status code
func (o *GetHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get history o k response a status code equal to that given
func (o *GetHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get history o k response
func (o *GetHistoryOK) Code() int {
	return 200
}

func (o *GetHistoryOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryOK  %+v", 200, o.Payload)
}

func (o *GetHistoryOK) String() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryOK  %+v", 200, o.Payload)
}

func (o *GetHistoryOK) GetPayload() *service_model.V1ListActivitiesResponse {
	return o.Payload
}

func (o *GetHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListActivitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHistoryNoContent creates a GetHistoryNoContent with default headers values
func NewGetHistoryNoContent() *GetHistoryNoContent {
	return &GetHistoryNoContent{}
}

/*
GetHistoryNoContent describes a response with status code 204, with default header values.

No content.
*/
type GetHistoryNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this get history no content response has a 2xx status code
func (o *GetHistoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get history no content response has a 3xx status code
func (o *GetHistoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get history no content response has a 4xx status code
func (o *GetHistoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this get history no content response has a 5xx status code
func (o *GetHistoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this get history no content response a status code equal to that given
func (o *GetHistoryNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the get history no content response
func (o *GetHistoryNoContent) Code() int {
	return 204
}

func (o *GetHistoryNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryNoContent  %+v", 204, o.Payload)
}

func (o *GetHistoryNoContent) String() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryNoContent  %+v", 204, o.Payload)
}

func (o *GetHistoryNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetHistoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHistoryForbidden creates a GetHistoryForbidden with default headers values
func NewGetHistoryForbidden() *GetHistoryForbidden {
	return &GetHistoryForbidden{}
}

/*
GetHistoryForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type GetHistoryForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this get history forbidden response has a 2xx status code
func (o *GetHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get history forbidden response has a 3xx status code
func (o *GetHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get history forbidden response has a 4xx status code
func (o *GetHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get history forbidden response has a 5xx status code
func (o *GetHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get history forbidden response a status code equal to that given
func (o *GetHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get history forbidden response
func (o *GetHistoryForbidden) Code() int {
	return 403
}

func (o *GetHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetHistoryForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHistoryNotFound creates a GetHistoryNotFound with default headers values
func NewGetHistoryNotFound() *GetHistoryNotFound {
	return &GetHistoryNotFound{}
}

/*
GetHistoryNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type GetHistoryNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this get history not found response has a 2xx status code
func (o *GetHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get history not found response has a 3xx status code
func (o *GetHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get history not found response has a 4xx status code
func (o *GetHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get history not found response has a 5xx status code
func (o *GetHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get history not found response a status code equal to that given
func (o *GetHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get history not found response
func (o *GetHistoryNotFound) Code() int {
	return 404
}

func (o *GetHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetHistoryNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] getHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetHistoryNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHistoryDefault creates a GetHistoryDefault with default headers values
func NewGetHistoryDefault(code int) *GetHistoryDefault {
	return &GetHistoryDefault{
		_statusCode: code,
	}
}

/*
GetHistoryDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetHistoryDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this get history default response has a 2xx status code
func (o *GetHistoryDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get history default response has a 3xx status code
func (o *GetHistoryDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get history default response has a 4xx status code
func (o *GetHistoryDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get history default response has a 5xx status code
func (o *GetHistoryDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get history default response a status code equal to that given
func (o *GetHistoryDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get history default response
func (o *GetHistoryDefault) Code() int {
	return o._statusCode
}

func (o *GetHistoryDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] GetHistory default  %+v", o._statusCode, o.Payload)
}

func (o *GetHistoryDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/users/history][%d] GetHistory default  %+v", o._statusCode, o.Payload)
}

func (o *GetHistoryDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetHistoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
