// Code generated by go-swagger; DO NOT EDIT.

package project_searches_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project searches v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project searches v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProjectSearch(params *CreateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectSearchOK, *CreateProjectSearchNoContent, error)

	DeleteProjectSearch(params *DeleteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSearchOK, *DeleteProjectSearchNoContent, error)

	GetProjectSearch(params *GetProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSearchOK, *GetProjectSearchNoContent, error)

	ListProjectSearchNames(params *ListProjectSearchNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectSearchNamesOK, *ListProjectSearchNamesNoContent, error)

	ListProjectSearches(params *ListProjectSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectSearchesOK, *ListProjectSearchesNoContent, error)

	PatchProjectSearch(params *PatchProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProjectSearchOK, *PatchProjectSearchNoContent, error)

	PromoteProjectSearch(params *PromoteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteProjectSearchOK, *PromoteProjectSearchNoContent, error)

	UpdateProjectSearch(params *UpdateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectSearchOK, *UpdateProjectSearchNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProjectSearch creates project search
*/
func (a *Client) CreateProjectSearch(params *CreateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectSearchOK, *CreateProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProjectSearch",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProjectSearchOK:
		return value, nil, nil
	case *CreateProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProjectSearch deletes project search
*/
func (a *Client) DeleteProjectSearch(params *DeleteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSearchOK, *DeleteProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectSearch",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{entity}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProjectSearchOK:
		return value, nil, nil
	case *DeleteProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProjectSearch gets project search
*/
func (a *Client) GetProjectSearch(params *GetProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSearchOK, *GetProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectSearch",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{entity}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProjectSearchOK:
		return value, nil, nil
	case *GetProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectSearchNames lists project search names
*/
func (a *Client) ListProjectSearchNames(params *ListProjectSearchNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectSearchNamesOK, *ListProjectSearchNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectSearchNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListProjectSearchNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{name}/searches/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectSearchNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListProjectSearchNamesOK:
		return value, nil, nil
	case *ListProjectSearchNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectSearchNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectSearches lists project searches
*/
func (a *Client) ListProjectSearches(params *ListProjectSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectSearchesOK, *ListProjectSearchesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListProjectSearches",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{name}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListProjectSearchesOK:
		return value, nil, nil
	case *ListProjectSearchesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectSearchesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchProjectSearch patches project search
*/
func (a *Client) PatchProjectSearch(params *PatchProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProjectSearchOK, *PatchProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchProjectSearch",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchProjectSearchOK:
		return value, nil, nil
	case *PatchProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PromoteProjectSearch promotes project search
*/
func (a *Client) PromoteProjectSearch(params *PromoteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteProjectSearchOK, *PromoteProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PromoteProjectSearch",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{entity}/searches/{uuid}/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PromoteProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PromoteProjectSearchOK:
		return value, nil, nil
	case *PromoteProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PromoteProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateProjectSearch updates project search
*/
func (a *Client) UpdateProjectSearch(params *UpdateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectSearchOK, *UpdateProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProjectSearch",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProjectSearchOK:
		return value, nil, nil
	case *UpdateProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
