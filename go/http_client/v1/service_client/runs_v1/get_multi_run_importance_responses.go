// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// GetMultiRunImportanceReader is a Reader for the GetMultiRunImportance structure.
type GetMultiRunImportanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMultiRunImportanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMultiRunImportanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetMultiRunImportanceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetMultiRunImportanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMultiRunImportanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetMultiRunImportanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMultiRunImportanceOK creates a GetMultiRunImportanceOK with default headers values
func NewGetMultiRunImportanceOK() *GetMultiRunImportanceOK {
	return &GetMultiRunImportanceOK{}
}

/*
GetMultiRunImportanceOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetMultiRunImportanceOK struct {
	Payload *service_model.V1MultiEventsResponse
}

// IsSuccess returns true when this get multi run importance o k response has a 2xx status code
func (o *GetMultiRunImportanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get multi run importance o k response has a 3xx status code
func (o *GetMultiRunImportanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get multi run importance o k response has a 4xx status code
func (o *GetMultiRunImportanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get multi run importance o k response has a 5xx status code
func (o *GetMultiRunImportanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get multi run importance o k response a status code equal to that given
func (o *GetMultiRunImportanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get multi run importance o k response
func (o *GetMultiRunImportanceOK) Code() int {
	return 200
}

func (o *GetMultiRunImportanceOK) Error() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceOK  %+v", 200, o.Payload)
}

func (o *GetMultiRunImportanceOK) String() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceOK  %+v", 200, o.Payload)
}

func (o *GetMultiRunImportanceOK) GetPayload() *service_model.V1MultiEventsResponse {
	return o.Payload
}

func (o *GetMultiRunImportanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1MultiEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMultiRunImportanceNoContent creates a GetMultiRunImportanceNoContent with default headers values
func NewGetMultiRunImportanceNoContent() *GetMultiRunImportanceNoContent {
	return &GetMultiRunImportanceNoContent{}
}

/*
GetMultiRunImportanceNoContent describes a response with status code 204, with default header values.

No content.
*/
type GetMultiRunImportanceNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this get multi run importance no content response has a 2xx status code
func (o *GetMultiRunImportanceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get multi run importance no content response has a 3xx status code
func (o *GetMultiRunImportanceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get multi run importance no content response has a 4xx status code
func (o *GetMultiRunImportanceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this get multi run importance no content response has a 5xx status code
func (o *GetMultiRunImportanceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this get multi run importance no content response a status code equal to that given
func (o *GetMultiRunImportanceNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the get multi run importance no content response
func (o *GetMultiRunImportanceNoContent) Code() int {
	return 204
}

func (o *GetMultiRunImportanceNoContent) Error() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceNoContent  %+v", 204, o.Payload)
}

func (o *GetMultiRunImportanceNoContent) String() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceNoContent  %+v", 204, o.Payload)
}

func (o *GetMultiRunImportanceNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetMultiRunImportanceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMultiRunImportanceForbidden creates a GetMultiRunImportanceForbidden with default headers values
func NewGetMultiRunImportanceForbidden() *GetMultiRunImportanceForbidden {
	return &GetMultiRunImportanceForbidden{}
}

/*
GetMultiRunImportanceForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type GetMultiRunImportanceForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this get multi run importance forbidden response has a 2xx status code
func (o *GetMultiRunImportanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get multi run importance forbidden response has a 3xx status code
func (o *GetMultiRunImportanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get multi run importance forbidden response has a 4xx status code
func (o *GetMultiRunImportanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get multi run importance forbidden response has a 5xx status code
func (o *GetMultiRunImportanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get multi run importance forbidden response a status code equal to that given
func (o *GetMultiRunImportanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get multi run importance forbidden response
func (o *GetMultiRunImportanceForbidden) Code() int {
	return 403
}

func (o *GetMultiRunImportanceForbidden) Error() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceForbidden  %+v", 403, o.Payload)
}

func (o *GetMultiRunImportanceForbidden) String() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceForbidden  %+v", 403, o.Payload)
}

func (o *GetMultiRunImportanceForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetMultiRunImportanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMultiRunImportanceNotFound creates a GetMultiRunImportanceNotFound with default headers values
func NewGetMultiRunImportanceNotFound() *GetMultiRunImportanceNotFound {
	return &GetMultiRunImportanceNotFound{}
}

/*
GetMultiRunImportanceNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type GetMultiRunImportanceNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this get multi run importance not found response has a 2xx status code
func (o *GetMultiRunImportanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get multi run importance not found response has a 3xx status code
func (o *GetMultiRunImportanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get multi run importance not found response has a 4xx status code
func (o *GetMultiRunImportanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get multi run importance not found response has a 5xx status code
func (o *GetMultiRunImportanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get multi run importance not found response a status code equal to that given
func (o *GetMultiRunImportanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get multi run importance not found response
func (o *GetMultiRunImportanceNotFound) Code() int {
	return 404
}

func (o *GetMultiRunImportanceNotFound) Error() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceNotFound  %+v", 404, o.Payload)
}

func (o *GetMultiRunImportanceNotFound) String() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] getMultiRunImportanceNotFound  %+v", 404, o.Payload)
}

func (o *GetMultiRunImportanceNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetMultiRunImportanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMultiRunImportanceDefault creates a GetMultiRunImportanceDefault with default headers values
func NewGetMultiRunImportanceDefault(code int) *GetMultiRunImportanceDefault {
	return &GetMultiRunImportanceDefault{
		_statusCode: code,
	}
}

/*
GetMultiRunImportanceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetMultiRunImportanceDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this get multi run importance default response has a 2xx status code
func (o *GetMultiRunImportanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get multi run importance default response has a 3xx status code
func (o *GetMultiRunImportanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get multi run importance default response has a 4xx status code
func (o *GetMultiRunImportanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get multi run importance default response has a 5xx status code
func (o *GetMultiRunImportanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get multi run importance default response a status code equal to that given
func (o *GetMultiRunImportanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get multi run importance default response
func (o *GetMultiRunImportanceDefault) Code() int {
	return o._statusCode
}

func (o *GetMultiRunImportanceDefault) Error() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] GetMultiRunImportance default  %+v", o._statusCode, o.Payload)
}

func (o *GetMultiRunImportanceDefault) String() string {
	return fmt.Sprintf("[POST /streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance][%d] GetMultiRunImportance default  %+v", o._statusCode, o.Payload)
}

func (o *GetMultiRunImportanceDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetMultiRunImportanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
