// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMultiRunImportanceParams creates a new GetMultiRunImportanceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMultiRunImportanceParams() *GetMultiRunImportanceParams {
	return &GetMultiRunImportanceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMultiRunImportanceParamsWithTimeout creates a new GetMultiRunImportanceParams object
// with the ability to set a timeout on a request.
func NewGetMultiRunImportanceParamsWithTimeout(timeout time.Duration) *GetMultiRunImportanceParams {
	return &GetMultiRunImportanceParams{
		timeout: timeout,
	}
}

// NewGetMultiRunImportanceParamsWithContext creates a new GetMultiRunImportanceParams object
// with the ability to set a context for a request.
func NewGetMultiRunImportanceParamsWithContext(ctx context.Context) *GetMultiRunImportanceParams {
	return &GetMultiRunImportanceParams{
		Context: ctx,
	}
}

// NewGetMultiRunImportanceParamsWithHTTPClient creates a new GetMultiRunImportanceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMultiRunImportanceParamsWithHTTPClient(client *http.Client) *GetMultiRunImportanceParams {
	return &GetMultiRunImportanceParams{
		HTTPClient: client,
	}
}

/*
GetMultiRunImportanceParams contains all the parameters to send to the API endpoint

	for the get multi run importance operation.

	Typically these are written to a http.Request.
*/
type GetMultiRunImportanceParams struct {

	/* Body.

	   Params/Metrics data
	*/
	Body interface{}

	/* Entity.

	   Entity where the run will be assigned
	*/
	Entity string

	/* Namespace.

	   namespace
	*/
	Namespace string

	/* Owner.

	   Owner of the namespace
	*/
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get multi run importance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMultiRunImportanceParams) WithDefaults() *GetMultiRunImportanceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get multi run importance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMultiRunImportanceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithTimeout(timeout time.Duration) *GetMultiRunImportanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithContext(ctx context.Context) *GetMultiRunImportanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithHTTPClient(client *http.Client) *GetMultiRunImportanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithBody(body interface{}) *GetMultiRunImportanceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetBody(body interface{}) {
	o.Body = body
}

// WithEntity adds the entity to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithEntity(entity string) *GetMultiRunImportanceParams {
	o.SetEntity(entity)
	return o
}

// SetEntity adds the entity to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetEntity(entity string) {
	o.Entity = entity
}

// WithNamespace adds the namespace to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithNamespace(namespace string) *GetMultiRunImportanceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOwner adds the owner to the get multi run importance params
func (o *GetMultiRunImportanceParams) WithOwner(owner string) *GetMultiRunImportanceParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get multi run importance params
func (o *GetMultiRunImportanceParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *GetMultiRunImportanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param entity
	if err := r.SetPathParam("entity", o.Entity); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
