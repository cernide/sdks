// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// DeleteRunArtifactReader is a Reader for the DeleteRunArtifact structure.
type DeleteRunArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRunArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRunArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteRunArtifactNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteRunArtifactForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRunArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteRunArtifactDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteRunArtifactOK creates a DeleteRunArtifactOK with default headers values
func NewDeleteRunArtifactOK() *DeleteRunArtifactOK {
	return &DeleteRunArtifactOK{}
}

/*
DeleteRunArtifactOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteRunArtifactOK struct {
}

// IsSuccess returns true when this delete run artifact o k response has a 2xx status code
func (o *DeleteRunArtifactOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete run artifact o k response has a 3xx status code
func (o *DeleteRunArtifactOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete run artifact o k response has a 4xx status code
func (o *DeleteRunArtifactOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete run artifact o k response has a 5xx status code
func (o *DeleteRunArtifactOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete run artifact o k response a status code equal to that given
func (o *DeleteRunArtifactOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete run artifact o k response
func (o *DeleteRunArtifactOK) Code() int {
	return 200
}

func (o *DeleteRunArtifactOK) Error() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactOK ", 200)
}

func (o *DeleteRunArtifactOK) String() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactOK ", 200)
}

func (o *DeleteRunArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRunArtifactNoContent creates a DeleteRunArtifactNoContent with default headers values
func NewDeleteRunArtifactNoContent() *DeleteRunArtifactNoContent {
	return &DeleteRunArtifactNoContent{}
}

/*
DeleteRunArtifactNoContent describes a response with status code 204, with default header values.

No content.
*/
type DeleteRunArtifactNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this delete run artifact no content response has a 2xx status code
func (o *DeleteRunArtifactNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete run artifact no content response has a 3xx status code
func (o *DeleteRunArtifactNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete run artifact no content response has a 4xx status code
func (o *DeleteRunArtifactNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete run artifact no content response has a 5xx status code
func (o *DeleteRunArtifactNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete run artifact no content response a status code equal to that given
func (o *DeleteRunArtifactNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete run artifact no content response
func (o *DeleteRunArtifactNoContent) Code() int {
	return 204
}

func (o *DeleteRunArtifactNoContent) Error() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactNoContent  %+v", 204, o.Payload)
}

func (o *DeleteRunArtifactNoContent) String() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactNoContent  %+v", 204, o.Payload)
}

func (o *DeleteRunArtifactNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRunArtifactNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRunArtifactForbidden creates a DeleteRunArtifactForbidden with default headers values
func NewDeleteRunArtifactForbidden() *DeleteRunArtifactForbidden {
	return &DeleteRunArtifactForbidden{}
}

/*
DeleteRunArtifactForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type DeleteRunArtifactForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this delete run artifact forbidden response has a 2xx status code
func (o *DeleteRunArtifactForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete run artifact forbidden response has a 3xx status code
func (o *DeleteRunArtifactForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete run artifact forbidden response has a 4xx status code
func (o *DeleteRunArtifactForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete run artifact forbidden response has a 5xx status code
func (o *DeleteRunArtifactForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete run artifact forbidden response a status code equal to that given
func (o *DeleteRunArtifactForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete run artifact forbidden response
func (o *DeleteRunArtifactForbidden) Code() int {
	return 403
}

func (o *DeleteRunArtifactForbidden) Error() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRunArtifactForbidden) String() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRunArtifactForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRunArtifactForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRunArtifactNotFound creates a DeleteRunArtifactNotFound with default headers values
func NewDeleteRunArtifactNotFound() *DeleteRunArtifactNotFound {
	return &DeleteRunArtifactNotFound{}
}

/*
DeleteRunArtifactNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type DeleteRunArtifactNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this delete run artifact not found response has a 2xx status code
func (o *DeleteRunArtifactNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete run artifact not found response has a 3xx status code
func (o *DeleteRunArtifactNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete run artifact not found response has a 4xx status code
func (o *DeleteRunArtifactNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete run artifact not found response has a 5xx status code
func (o *DeleteRunArtifactNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete run artifact not found response a status code equal to that given
func (o *DeleteRunArtifactNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete run artifact not found response
func (o *DeleteRunArtifactNotFound) Code() int {
	return 404
}

func (o *DeleteRunArtifactNotFound) Error() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRunArtifactNotFound) String() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] deleteRunArtifactNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRunArtifactNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRunArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRunArtifactDefault creates a DeleteRunArtifactDefault with default headers values
func NewDeleteRunArtifactDefault(code int) *DeleteRunArtifactDefault {
	return &DeleteRunArtifactDefault{
		_statusCode: code,
	}
}

/*
DeleteRunArtifactDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type DeleteRunArtifactDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this delete run artifact default response has a 2xx status code
func (o *DeleteRunArtifactDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete run artifact default response has a 3xx status code
func (o *DeleteRunArtifactDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete run artifact default response has a 4xx status code
func (o *DeleteRunArtifactDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete run artifact default response has a 5xx status code
func (o *DeleteRunArtifactDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete run artifact default response a status code equal to that given
func (o *DeleteRunArtifactDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete run artifact default response
func (o *DeleteRunArtifactDefault) Code() int {
	return o._statusCode
}

func (o *DeleteRunArtifactDefault) Error() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] DeleteRunArtifact default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRunArtifactDefault) String() string {
	return fmt.Sprintf("[DELETE /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact][%d] DeleteRunArtifact default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRunArtifactDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *DeleteRunArtifactDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
