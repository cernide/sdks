// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// ApproveRunsReader is a Reader for the ApproveRuns structure.
type ApproveRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApproveRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewApproveRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewApproveRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApproveRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewApproveRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewApproveRunsOK creates a ApproveRunsOK with default headers values
func NewApproveRunsOK() *ApproveRunsOK {
	return &ApproveRunsOK{}
}

/*
ApproveRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ApproveRunsOK struct {
}

// IsSuccess returns true when this approve runs o k response has a 2xx status code
func (o *ApproveRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve runs o k response has a 3xx status code
func (o *ApproveRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve runs o k response has a 4xx status code
func (o *ApproveRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve runs o k response has a 5xx status code
func (o *ApproveRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve runs o k response a status code equal to that given
func (o *ApproveRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve runs o k response
func (o *ApproveRunsOK) Code() int {
	return 200
}

func (o *ApproveRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsOK ", 200)
}

func (o *ApproveRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsOK ", 200)
}

func (o *ApproveRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApproveRunsNoContent creates a ApproveRunsNoContent with default headers values
func NewApproveRunsNoContent() *ApproveRunsNoContent {
	return &ApproveRunsNoContent{}
}

/*
ApproveRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type ApproveRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this approve runs no content response has a 2xx status code
func (o *ApproveRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve runs no content response has a 3xx status code
func (o *ApproveRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve runs no content response has a 4xx status code
func (o *ApproveRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve runs no content response has a 5xx status code
func (o *ApproveRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this approve runs no content response a status code equal to that given
func (o *ApproveRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the approve runs no content response
func (o *ApproveRunsNoContent) Code() int {
	return 204
}

func (o *ApproveRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsNoContent  %+v", 204, o.Payload)
}

func (o *ApproveRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsNoContent  %+v", 204, o.Payload)
}

func (o *ApproveRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveRunsForbidden creates a ApproveRunsForbidden with default headers values
func NewApproveRunsForbidden() *ApproveRunsForbidden {
	return &ApproveRunsForbidden{}
}

/*
ApproveRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type ApproveRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this approve runs forbidden response has a 2xx status code
func (o *ApproveRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve runs forbidden response has a 3xx status code
func (o *ApproveRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve runs forbidden response has a 4xx status code
func (o *ApproveRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve runs forbidden response has a 5xx status code
func (o *ApproveRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this approve runs forbidden response a status code equal to that given
func (o *ApproveRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the approve runs forbidden response
func (o *ApproveRunsForbidden) Code() int {
	return 403
}

func (o *ApproveRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsForbidden  %+v", 403, o.Payload)
}

func (o *ApproveRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsForbidden  %+v", 403, o.Payload)
}

func (o *ApproveRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveRunsNotFound creates a ApproveRunsNotFound with default headers values
func NewApproveRunsNotFound() *ApproveRunsNotFound {
	return &ApproveRunsNotFound{}
}

/*
ApproveRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type ApproveRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this approve runs not found response has a 2xx status code
func (o *ApproveRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve runs not found response has a 3xx status code
func (o *ApproveRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve runs not found response has a 4xx status code
func (o *ApproveRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve runs not found response has a 5xx status code
func (o *ApproveRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this approve runs not found response a status code equal to that given
func (o *ApproveRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the approve runs not found response
func (o *ApproveRunsNotFound) Code() int {
	return 404
}

func (o *ApproveRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsNotFound  %+v", 404, o.Payload)
}

func (o *ApproveRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] approveRunsNotFound  %+v", 404, o.Payload)
}

func (o *ApproveRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveRunsDefault creates a ApproveRunsDefault with default headers values
func NewApproveRunsDefault(code int) *ApproveRunsDefault {
	return &ApproveRunsDefault{
		_statusCode: code,
	}
}

/*
ApproveRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ApproveRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this approve runs default response has a 2xx status code
func (o *ApproveRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this approve runs default response has a 3xx status code
func (o *ApproveRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this approve runs default response has a 4xx status code
func (o *ApproveRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this approve runs default response has a 5xx status code
func (o *ApproveRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this approve runs default response a status code equal to that given
func (o *ApproveRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the approve runs default response
func (o *ApproveRunsDefault) Code() int {
	return o._statusCode
}

func (o *ApproveRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] ApproveRuns default  %+v", o._statusCode, o.Payload)
}

func (o *ApproveRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/approve][%d] ApproveRuns default  %+v", o._statusCode, o.Payload)
}

func (o *ApproveRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ApproveRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
