// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadRunArtifactParams creates a new UploadRunArtifactParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadRunArtifactParams() *UploadRunArtifactParams {
	return &UploadRunArtifactParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadRunArtifactParamsWithTimeout creates a new UploadRunArtifactParams object
// with the ability to set a timeout on a request.
func NewUploadRunArtifactParamsWithTimeout(timeout time.Duration) *UploadRunArtifactParams {
	return &UploadRunArtifactParams{
		timeout: timeout,
	}
}

// NewUploadRunArtifactParamsWithContext creates a new UploadRunArtifactParams object
// with the ability to set a context for a request.
func NewUploadRunArtifactParamsWithContext(ctx context.Context) *UploadRunArtifactParams {
	return &UploadRunArtifactParams{
		Context: ctx,
	}
}

// NewUploadRunArtifactParamsWithHTTPClient creates a new UploadRunArtifactParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadRunArtifactParamsWithHTTPClient(client *http.Client) *UploadRunArtifactParams {
	return &UploadRunArtifactParams{
		HTTPClient: client,
	}
}

/*
UploadRunArtifactParams contains all the parameters to send to the API endpoint

	for the upload run artifact operation.

	Typically these are written to a http.Request.
*/
type UploadRunArtifactParams struct {

	/* Connection.

	   Connection to use.
	*/
	Connection *string

	/* Overwrite.

	   File path query params.
	*/
	Overwrite *bool

	/* Owner.

	   Owner of the namespace
	*/
	Owner string

	/* Path.

	   File path query params.
	*/
	Path *string

	/* Project.

	   Project having access to the store
	*/
	Project string

	/* Uploadfile.

	   The file to upload.
	*/
	Uploadfile runtime.NamedReadCloser

	/* UUID.

	   Unique integer identifier of the entity
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload run artifact params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadRunArtifactParams) WithDefaults() *UploadRunArtifactParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload run artifact params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadRunArtifactParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload run artifact params
func (o *UploadRunArtifactParams) WithTimeout(timeout time.Duration) *UploadRunArtifactParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload run artifact params
func (o *UploadRunArtifactParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload run artifact params
func (o *UploadRunArtifactParams) WithContext(ctx context.Context) *UploadRunArtifactParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload run artifact params
func (o *UploadRunArtifactParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload run artifact params
func (o *UploadRunArtifactParams) WithHTTPClient(client *http.Client) *UploadRunArtifactParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload run artifact params
func (o *UploadRunArtifactParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnection adds the connection to the upload run artifact params
func (o *UploadRunArtifactParams) WithConnection(connection *string) *UploadRunArtifactParams {
	o.SetConnection(connection)
	return o
}

// SetConnection adds the connection to the upload run artifact params
func (o *UploadRunArtifactParams) SetConnection(connection *string) {
	o.Connection = connection
}

// WithOverwrite adds the overwrite to the upload run artifact params
func (o *UploadRunArtifactParams) WithOverwrite(overwrite *bool) *UploadRunArtifactParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the upload run artifact params
func (o *UploadRunArtifactParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithOwner adds the owner to the upload run artifact params
func (o *UploadRunArtifactParams) WithOwner(owner string) *UploadRunArtifactParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the upload run artifact params
func (o *UploadRunArtifactParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPath adds the path to the upload run artifact params
func (o *UploadRunArtifactParams) WithPath(path *string) *UploadRunArtifactParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the upload run artifact params
func (o *UploadRunArtifactParams) SetPath(path *string) {
	o.Path = path
}

// WithProject adds the project to the upload run artifact params
func (o *UploadRunArtifactParams) WithProject(project string) *UploadRunArtifactParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the upload run artifact params
func (o *UploadRunArtifactParams) SetProject(project string) {
	o.Project = project
}

// WithUploadfile adds the uploadfile to the upload run artifact params
func (o *UploadRunArtifactParams) WithUploadfile(uploadfile runtime.NamedReadCloser) *UploadRunArtifactParams {
	o.SetUploadfile(uploadfile)
	return o
}

// SetUploadfile adds the uploadfile to the upload run artifact params
func (o *UploadRunArtifactParams) SetUploadfile(uploadfile runtime.NamedReadCloser) {
	o.Uploadfile = uploadfile
}

// WithUUID adds the uuid to the upload run artifact params
func (o *UploadRunArtifactParams) WithUUID(uuid string) *UploadRunArtifactParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the upload run artifact params
func (o *UploadRunArtifactParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *UploadRunArtifactParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Connection != nil {

		// query param connection
		var qrConnection string

		if o.Connection != nil {
			qrConnection = *o.Connection
		}
		qConnection := qrConnection
		if qConnection != "" {

			if err := r.SetQueryParam("connection", qConnection); err != nil {
				return err
			}
		}
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool

		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {

			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}
	// form file param uploadfile
	if err := r.SetFileParam("uploadfile", o.Uploadfile); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
