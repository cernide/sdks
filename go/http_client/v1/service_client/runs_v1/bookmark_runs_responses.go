// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// BookmarkRunsReader is a Reader for the BookmarkRuns structure.
type BookmarkRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BookmarkRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBookmarkRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewBookmarkRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewBookmarkRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBookmarkRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewBookmarkRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBookmarkRunsOK creates a BookmarkRunsOK with default headers values
func NewBookmarkRunsOK() *BookmarkRunsOK {
	return &BookmarkRunsOK{}
}

/* BookmarkRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type BookmarkRunsOK struct {
}

// IsSuccess returns true when this bookmark runs o k response has a 2xx status code
func (o *BookmarkRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bookmark runs o k response has a 3xx status code
func (o *BookmarkRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bookmark runs o k response has a 4xx status code
func (o *BookmarkRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this bookmark runs o k response has a 5xx status code
func (o *BookmarkRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this bookmark runs o k response a status code equal to that given
func (o *BookmarkRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the bookmark runs o k response
func (o *BookmarkRunsOK) Code() int {
	return 200
}

func (o *BookmarkRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsOK ", 200)
}

func (o *BookmarkRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsOK ", 200)
}

func (o *BookmarkRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookmarkRunsNoContent creates a BookmarkRunsNoContent with default headers values
func NewBookmarkRunsNoContent() *BookmarkRunsNoContent {
	return &BookmarkRunsNoContent{}
}

/* BookmarkRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type BookmarkRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this bookmark runs no content response has a 2xx status code
func (o *BookmarkRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bookmark runs no content response has a 3xx status code
func (o *BookmarkRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bookmark runs no content response has a 4xx status code
func (o *BookmarkRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this bookmark runs no content response has a 5xx status code
func (o *BookmarkRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this bookmark runs no content response a status code equal to that given
func (o *BookmarkRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the bookmark runs no content response
func (o *BookmarkRunsNoContent) Code() int {
	return 204
}

func (o *BookmarkRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsNoContent  %+v", 204, o.Payload)
}

func (o *BookmarkRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsNoContent  %+v", 204, o.Payload)
}

func (o *BookmarkRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *BookmarkRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookmarkRunsForbidden creates a BookmarkRunsForbidden with default headers values
func NewBookmarkRunsForbidden() *BookmarkRunsForbidden {
	return &BookmarkRunsForbidden{}
}

/* BookmarkRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type BookmarkRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this bookmark runs forbidden response has a 2xx status code
func (o *BookmarkRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bookmark runs forbidden response has a 3xx status code
func (o *BookmarkRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bookmark runs forbidden response has a 4xx status code
func (o *BookmarkRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this bookmark runs forbidden response has a 5xx status code
func (o *BookmarkRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this bookmark runs forbidden response a status code equal to that given
func (o *BookmarkRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the bookmark runs forbidden response
func (o *BookmarkRunsForbidden) Code() int {
	return 403
}

func (o *BookmarkRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsForbidden  %+v", 403, o.Payload)
}

func (o *BookmarkRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsForbidden  %+v", 403, o.Payload)
}

func (o *BookmarkRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *BookmarkRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookmarkRunsNotFound creates a BookmarkRunsNotFound with default headers values
func NewBookmarkRunsNotFound() *BookmarkRunsNotFound {
	return &BookmarkRunsNotFound{}
}

/* BookmarkRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type BookmarkRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this bookmark runs not found response has a 2xx status code
func (o *BookmarkRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bookmark runs not found response has a 3xx status code
func (o *BookmarkRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bookmark runs not found response has a 4xx status code
func (o *BookmarkRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this bookmark runs not found response has a 5xx status code
func (o *BookmarkRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this bookmark runs not found response a status code equal to that given
func (o *BookmarkRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the bookmark runs not found response
func (o *BookmarkRunsNotFound) Code() int {
	return 404
}

func (o *BookmarkRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsNotFound  %+v", 404, o.Payload)
}

func (o *BookmarkRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] bookmarkRunsNotFound  %+v", 404, o.Payload)
}

func (o *BookmarkRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *BookmarkRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookmarkRunsDefault creates a BookmarkRunsDefault with default headers values
func NewBookmarkRunsDefault(code int) *BookmarkRunsDefault {
	return &BookmarkRunsDefault{
		_statusCode: code,
	}
}

/* BookmarkRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type BookmarkRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this bookmark runs default response has a 2xx status code
func (o *BookmarkRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this bookmark runs default response has a 3xx status code
func (o *BookmarkRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this bookmark runs default response has a 4xx status code
func (o *BookmarkRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this bookmark runs default response has a 5xx status code
func (o *BookmarkRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this bookmark runs default response a status code equal to that given
func (o *BookmarkRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the bookmark runs default response
func (o *BookmarkRunsDefault) Code() int {
	return o._statusCode
}

func (o *BookmarkRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] BookmarkRuns default  %+v", o._statusCode, o.Payload)
}

func (o *BookmarkRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/bookmark][%d] BookmarkRuns default  %+v", o._statusCode, o.Payload)
}

func (o *BookmarkRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *BookmarkRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
