// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// InvalidateRunReader is a Reader for the InvalidateRun structure.
type InvalidateRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InvalidateRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInvalidateRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewInvalidateRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewInvalidateRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInvalidateRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewInvalidateRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewInvalidateRunOK creates a InvalidateRunOK with default headers values
func NewInvalidateRunOK() *InvalidateRunOK {
	return &InvalidateRunOK{}
}

/* InvalidateRunOK describes a response with status code 200, with default header values.

A successful response.
*/
type InvalidateRunOK struct {
}

// IsSuccess returns true when this invalidate run o k response has a 2xx status code
func (o *InvalidateRunOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invalidate run o k response has a 3xx status code
func (o *InvalidateRunOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate run o k response has a 4xx status code
func (o *InvalidateRunOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this invalidate run o k response has a 5xx status code
func (o *InvalidateRunOK) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate run o k response a status code equal to that given
func (o *InvalidateRunOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the invalidate run o k response
func (o *InvalidateRunOK) Code() int {
	return 200
}

func (o *InvalidateRunOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunOK ", 200)
}

func (o *InvalidateRunOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunOK ", 200)
}

func (o *InvalidateRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInvalidateRunNoContent creates a InvalidateRunNoContent with default headers values
func NewInvalidateRunNoContent() *InvalidateRunNoContent {
	return &InvalidateRunNoContent{}
}

/* InvalidateRunNoContent describes a response with status code 204, with default header values.

No content.
*/
type InvalidateRunNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate run no content response has a 2xx status code
func (o *InvalidateRunNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invalidate run no content response has a 3xx status code
func (o *InvalidateRunNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate run no content response has a 4xx status code
func (o *InvalidateRunNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this invalidate run no content response has a 5xx status code
func (o *InvalidateRunNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate run no content response a status code equal to that given
func (o *InvalidateRunNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the invalidate run no content response
func (o *InvalidateRunNoContent) Code() int {
	return 204
}

func (o *InvalidateRunNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunNoContent  %+v", 204, o.Payload)
}

func (o *InvalidateRunNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunNoContent  %+v", 204, o.Payload)
}

func (o *InvalidateRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateRunForbidden creates a InvalidateRunForbidden with default headers values
func NewInvalidateRunForbidden() *InvalidateRunForbidden {
	return &InvalidateRunForbidden{}
}

/* InvalidateRunForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type InvalidateRunForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate run forbidden response has a 2xx status code
func (o *InvalidateRunForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invalidate run forbidden response has a 3xx status code
func (o *InvalidateRunForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate run forbidden response has a 4xx status code
func (o *InvalidateRunForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this invalidate run forbidden response has a 5xx status code
func (o *InvalidateRunForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate run forbidden response a status code equal to that given
func (o *InvalidateRunForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the invalidate run forbidden response
func (o *InvalidateRunForbidden) Code() int {
	return 403
}

func (o *InvalidateRunForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunForbidden  %+v", 403, o.Payload)
}

func (o *InvalidateRunForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunForbidden  %+v", 403, o.Payload)
}

func (o *InvalidateRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateRunNotFound creates a InvalidateRunNotFound with default headers values
func NewInvalidateRunNotFound() *InvalidateRunNotFound {
	return &InvalidateRunNotFound{}
}

/* InvalidateRunNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type InvalidateRunNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate run not found response has a 2xx status code
func (o *InvalidateRunNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invalidate run not found response has a 3xx status code
func (o *InvalidateRunNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate run not found response has a 4xx status code
func (o *InvalidateRunNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this invalidate run not found response has a 5xx status code
func (o *InvalidateRunNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate run not found response a status code equal to that given
func (o *InvalidateRunNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the invalidate run not found response
func (o *InvalidateRunNotFound) Code() int {
	return 404
}

func (o *InvalidateRunNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunNotFound  %+v", 404, o.Payload)
}

func (o *InvalidateRunNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] invalidateRunNotFound  %+v", 404, o.Payload)
}

func (o *InvalidateRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateRunDefault creates a InvalidateRunDefault with default headers values
func NewInvalidateRunDefault(code int) *InvalidateRunDefault {
	return &InvalidateRunDefault{
		_statusCode: code,
	}
}

/* InvalidateRunDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type InvalidateRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this invalidate run default response has a 2xx status code
func (o *InvalidateRunDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this invalidate run default response has a 3xx status code
func (o *InvalidateRunDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this invalidate run default response has a 4xx status code
func (o *InvalidateRunDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this invalidate run default response has a 5xx status code
func (o *InvalidateRunDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this invalidate run default response a status code equal to that given
func (o *InvalidateRunDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the invalidate run default response
func (o *InvalidateRunDefault) Code() int {
	return o._statusCode
}

func (o *InvalidateRunDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] InvalidateRun default  %+v", o._statusCode, o.Payload)
}

func (o *InvalidateRunDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/invalidate][%d] InvalidateRun default  %+v", o._statusCode, o.Payload)
}

func (o *InvalidateRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *InvalidateRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
