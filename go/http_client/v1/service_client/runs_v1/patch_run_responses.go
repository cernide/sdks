// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchRunReader is a Reader for the PatchRun structure.
type PatchRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchRunOK creates a PatchRunOK with default headers values
func NewPatchRunOK() *PatchRunOK {
	return &PatchRunOK{}
}

/* PatchRunOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchRunOK struct {
	Payload *service_model.V1Run
}

// IsSuccess returns true when this patch run o k response has a 2xx status code
func (o *PatchRunOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch run o k response has a 3xx status code
func (o *PatchRunOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch run o k response has a 4xx status code
func (o *PatchRunOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch run o k response has a 5xx status code
func (o *PatchRunOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch run o k response a status code equal to that given
func (o *PatchRunOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchRunOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunOK  %+v", 200, o.Payload)
}

func (o *PatchRunOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunOK  %+v", 200, o.Payload)
}

func (o *PatchRunOK) GetPayload() *service_model.V1Run {
	return o.Payload
}

func (o *PatchRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Run)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunNoContent creates a PatchRunNoContent with default headers values
func NewPatchRunNoContent() *PatchRunNoContent {
	return &PatchRunNoContent{}
}

/* PatchRunNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchRunNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch run no content response has a 2xx status code
func (o *PatchRunNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch run no content response has a 3xx status code
func (o *PatchRunNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch run no content response has a 4xx status code
func (o *PatchRunNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch run no content response has a 5xx status code
func (o *PatchRunNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch run no content response a status code equal to that given
func (o *PatchRunNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PatchRunNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunNoContent  %+v", 204, o.Payload)
}

func (o *PatchRunNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunNoContent  %+v", 204, o.Payload)
}

func (o *PatchRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunForbidden creates a PatchRunForbidden with default headers values
func NewPatchRunForbidden() *PatchRunForbidden {
	return &PatchRunForbidden{}
}

/* PatchRunForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchRunForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch run forbidden response has a 2xx status code
func (o *PatchRunForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch run forbidden response has a 3xx status code
func (o *PatchRunForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch run forbidden response has a 4xx status code
func (o *PatchRunForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch run forbidden response has a 5xx status code
func (o *PatchRunForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch run forbidden response a status code equal to that given
func (o *PatchRunForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRunForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunForbidden  %+v", 403, o.Payload)
}

func (o *PatchRunForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunForbidden  %+v", 403, o.Payload)
}

func (o *PatchRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunNotFound creates a PatchRunNotFound with default headers values
func NewPatchRunNotFound() *PatchRunNotFound {
	return &PatchRunNotFound{}
}

/* PatchRunNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchRunNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch run not found response has a 2xx status code
func (o *PatchRunNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch run not found response has a 3xx status code
func (o *PatchRunNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch run not found response has a 4xx status code
func (o *PatchRunNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch run not found response has a 5xx status code
func (o *PatchRunNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch run not found response a status code equal to that given
func (o *PatchRunNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRunNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunNotFound  %+v", 404, o.Payload)
}

func (o *PatchRunNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] patchRunNotFound  %+v", 404, o.Payload)
}

func (o *PatchRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunDefault creates a PatchRunDefault with default headers values
func NewPatchRunDefault(code int) *PatchRunDefault {
	return &PatchRunDefault{
		_statusCode: code,
	}
}

/* PatchRunDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch run default response
func (o *PatchRunDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch run default response has a 2xx status code
func (o *PatchRunDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch run default response has a 3xx status code
func (o *PatchRunDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch run default response has a 4xx status code
func (o *PatchRunDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch run default response has a 5xx status code
func (o *PatchRunDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch run default response a status code equal to that given
func (o *PatchRunDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchRunDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] PatchRun default  %+v", o._statusCode, o.Payload)
}

func (o *PatchRunDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] PatchRun default  %+v", o._statusCode, o.Payload)
}

func (o *PatchRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
