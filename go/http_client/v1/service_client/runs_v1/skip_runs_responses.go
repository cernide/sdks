// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// SkipRunsReader is a Reader for the SkipRuns structure.
type SkipRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SkipRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSkipRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSkipRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSkipRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSkipRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSkipRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSkipRunsOK creates a SkipRunsOK with default headers values
func NewSkipRunsOK() *SkipRunsOK {
	return &SkipRunsOK{}
}

/*
SkipRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SkipRunsOK struct {
}

// IsSuccess returns true when this skip runs o k response has a 2xx status code
func (o *SkipRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip runs o k response has a 3xx status code
func (o *SkipRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip runs o k response has a 4xx status code
func (o *SkipRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip runs o k response has a 5xx status code
func (o *SkipRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this skip runs o k response a status code equal to that given
func (o *SkipRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the skip runs o k response
func (o *SkipRunsOK) Code() int {
	return 200
}

func (o *SkipRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsOK ", 200)
}

func (o *SkipRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsOK ", 200)
}

func (o *SkipRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSkipRunsNoContent creates a SkipRunsNoContent with default headers values
func NewSkipRunsNoContent() *SkipRunsNoContent {
	return &SkipRunsNoContent{}
}

/*
SkipRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type SkipRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this skip runs no content response has a 2xx status code
func (o *SkipRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip runs no content response has a 3xx status code
func (o *SkipRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip runs no content response has a 4xx status code
func (o *SkipRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip runs no content response has a 5xx status code
func (o *SkipRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this skip runs no content response a status code equal to that given
func (o *SkipRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the skip runs no content response
func (o *SkipRunsNoContent) Code() int {
	return 204
}

func (o *SkipRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipRunsForbidden creates a SkipRunsForbidden with default headers values
func NewSkipRunsForbidden() *SkipRunsForbidden {
	return &SkipRunsForbidden{}
}

/*
SkipRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type SkipRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this skip runs forbidden response has a 2xx status code
func (o *SkipRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip runs forbidden response has a 3xx status code
func (o *SkipRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip runs forbidden response has a 4xx status code
func (o *SkipRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip runs forbidden response has a 5xx status code
func (o *SkipRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this skip runs forbidden response a status code equal to that given
func (o *SkipRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the skip runs forbidden response
func (o *SkipRunsForbidden) Code() int {
	return 403
}

func (o *SkipRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipRunsNotFound creates a SkipRunsNotFound with default headers values
func NewSkipRunsNotFound() *SkipRunsNotFound {
	return &SkipRunsNotFound{}
}

/*
SkipRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type SkipRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this skip runs not found response has a 2xx status code
func (o *SkipRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip runs not found response has a 3xx status code
func (o *SkipRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip runs not found response has a 4xx status code
func (o *SkipRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip runs not found response has a 5xx status code
func (o *SkipRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this skip runs not found response a status code equal to that given
func (o *SkipRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the skip runs not found response
func (o *SkipRunsNotFound) Code() int {
	return 404
}

func (o *SkipRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] skipRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipRunsDefault creates a SkipRunsDefault with default headers values
func NewSkipRunsDefault(code int) *SkipRunsDefault {
	return &SkipRunsDefault{
		_statusCode: code,
	}
}

/*
SkipRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SkipRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this skip runs default response has a 2xx status code
func (o *SkipRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this skip runs default response has a 3xx status code
func (o *SkipRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this skip runs default response has a 4xx status code
func (o *SkipRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this skip runs default response has a 5xx status code
func (o *SkipRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this skip runs default response a status code equal to that given
func (o *SkipRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the skip runs default response
func (o *SkipRunsDefault) Code() int {
	return o._statusCode
}

func (o *SkipRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] SkipRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/runs/skip][%d] SkipRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *SkipRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
