// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// StopRunReader is a Reader for the StopRun structure.
type StopRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewStopRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewStopRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStopRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStopRunOK creates a StopRunOK with default headers values
func NewStopRunOK() *StopRunOK {
	return &StopRunOK{}
}

/*
StopRunOK describes a response with status code 200, with default header values.

A successful response.
*/
type StopRunOK struct {
}

// IsSuccess returns true when this stop run o k response has a 2xx status code
func (o *StopRunOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop run o k response has a 3xx status code
func (o *StopRunOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop run o k response has a 4xx status code
func (o *StopRunOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop run o k response has a 5xx status code
func (o *StopRunOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop run o k response a status code equal to that given
func (o *StopRunOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop run o k response
func (o *StopRunOK) Code() int {
	return 200
}

func (o *StopRunOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunOK ", 200)
}

func (o *StopRunOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunOK ", 200)
}

func (o *StopRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopRunNoContent creates a StopRunNoContent with default headers values
func NewStopRunNoContent() *StopRunNoContent {
	return &StopRunNoContent{}
}

/*
StopRunNoContent describes a response with status code 204, with default header values.

No content.
*/
type StopRunNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this stop run no content response has a 2xx status code
func (o *StopRunNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop run no content response has a 3xx status code
func (o *StopRunNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop run no content response has a 4xx status code
func (o *StopRunNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop run no content response has a 5xx status code
func (o *StopRunNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop run no content response a status code equal to that given
func (o *StopRunNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop run no content response
func (o *StopRunNoContent) Code() int {
	return 204
}

func (o *StopRunNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunNoContent  %+v", 204, o.Payload)
}

func (o *StopRunNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunNoContent  %+v", 204, o.Payload)
}

func (o *StopRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunForbidden creates a StopRunForbidden with default headers values
func NewStopRunForbidden() *StopRunForbidden {
	return &StopRunForbidden{}
}

/*
StopRunForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type StopRunForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this stop run forbidden response has a 2xx status code
func (o *StopRunForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop run forbidden response has a 3xx status code
func (o *StopRunForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop run forbidden response has a 4xx status code
func (o *StopRunForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop run forbidden response has a 5xx status code
func (o *StopRunForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop run forbidden response a status code equal to that given
func (o *StopRunForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop run forbidden response
func (o *StopRunForbidden) Code() int {
	return 403
}

func (o *StopRunForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunForbidden  %+v", 403, o.Payload)
}

func (o *StopRunForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunForbidden  %+v", 403, o.Payload)
}

func (o *StopRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunNotFound creates a StopRunNotFound with default headers values
func NewStopRunNotFound() *StopRunNotFound {
	return &StopRunNotFound{}
}

/*
StopRunNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type StopRunNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this stop run not found response has a 2xx status code
func (o *StopRunNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop run not found response has a 3xx status code
func (o *StopRunNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop run not found response has a 4xx status code
func (o *StopRunNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop run not found response has a 5xx status code
func (o *StopRunNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop run not found response a status code equal to that given
func (o *StopRunNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop run not found response
func (o *StopRunNotFound) Code() int {
	return 404
}

func (o *StopRunNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunNotFound  %+v", 404, o.Payload)
}

func (o *StopRunNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] stopRunNotFound  %+v", 404, o.Payload)
}

func (o *StopRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunDefault creates a StopRunDefault with default headers values
func NewStopRunDefault(code int) *StopRunDefault {
	return &StopRunDefault{
		_statusCode: code,
	}
}

/*
StopRunDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type StopRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this stop run default response has a 2xx status code
func (o *StopRunDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this stop run default response has a 3xx status code
func (o *StopRunDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this stop run default response has a 4xx status code
func (o *StopRunDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this stop run default response has a 5xx status code
func (o *StopRunDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this stop run default response a status code equal to that given
func (o *StopRunDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the stop run default response
func (o *StopRunDefault) Code() int {
	return o._statusCode
}

func (o *StopRunDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] StopRun default  %+v", o._statusCode, o.Payload)
}

func (o *StopRunDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/stop][%d] StopRun default  %+v", o._statusCode, o.Payload)
}

func (o *StopRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *StopRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
