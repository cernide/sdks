// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// StopRunsReader is a Reader for the StopRuns structure.
type StopRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewStopRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewStopRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStopRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStopRunsOK creates a StopRunsOK with default headers values
func NewStopRunsOK() *StopRunsOK {
	return &StopRunsOK{}
}

/*
StopRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type StopRunsOK struct {
}

// IsSuccess returns true when this stop runs o k response has a 2xx status code
func (o *StopRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop runs o k response has a 3xx status code
func (o *StopRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop runs o k response has a 4xx status code
func (o *StopRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop runs o k response has a 5xx status code
func (o *StopRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop runs o k response a status code equal to that given
func (o *StopRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop runs o k response
func (o *StopRunsOK) Code() int {
	return 200
}

func (o *StopRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsOK ", 200)
}

func (o *StopRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsOK ", 200)
}

func (o *StopRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopRunsNoContent creates a StopRunsNoContent with default headers values
func NewStopRunsNoContent() *StopRunsNoContent {
	return &StopRunsNoContent{}
}

/*
StopRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type StopRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this stop runs no content response has a 2xx status code
func (o *StopRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop runs no content response has a 3xx status code
func (o *StopRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop runs no content response has a 4xx status code
func (o *StopRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop runs no content response has a 5xx status code
func (o *StopRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop runs no content response a status code equal to that given
func (o *StopRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop runs no content response
func (o *StopRunsNoContent) Code() int {
	return 204
}

func (o *StopRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsNoContent  %+v", 204, o.Payload)
}

func (o *StopRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsNoContent  %+v", 204, o.Payload)
}

func (o *StopRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunsForbidden creates a StopRunsForbidden with default headers values
func NewStopRunsForbidden() *StopRunsForbidden {
	return &StopRunsForbidden{}
}

/*
StopRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type StopRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this stop runs forbidden response has a 2xx status code
func (o *StopRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop runs forbidden response has a 3xx status code
func (o *StopRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop runs forbidden response has a 4xx status code
func (o *StopRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop runs forbidden response has a 5xx status code
func (o *StopRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop runs forbidden response a status code equal to that given
func (o *StopRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop runs forbidden response
func (o *StopRunsForbidden) Code() int {
	return 403
}

func (o *StopRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsForbidden  %+v", 403, o.Payload)
}

func (o *StopRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsForbidden  %+v", 403, o.Payload)
}

func (o *StopRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunsNotFound creates a StopRunsNotFound with default headers values
func NewStopRunsNotFound() *StopRunsNotFound {
	return &StopRunsNotFound{}
}

/*
StopRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type StopRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this stop runs not found response has a 2xx status code
func (o *StopRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop runs not found response has a 3xx status code
func (o *StopRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop runs not found response has a 4xx status code
func (o *StopRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop runs not found response has a 5xx status code
func (o *StopRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop runs not found response a status code equal to that given
func (o *StopRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop runs not found response
func (o *StopRunsNotFound) Code() int {
	return 404
}

func (o *StopRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsNotFound  %+v", 404, o.Payload)
}

func (o *StopRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] stopRunsNotFound  %+v", 404, o.Payload)
}

func (o *StopRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *StopRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunsDefault creates a StopRunsDefault with default headers values
func NewStopRunsDefault(code int) *StopRunsDefault {
	return &StopRunsDefault{
		_statusCode: code,
	}
}

/*
StopRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type StopRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this stop runs default response has a 2xx status code
func (o *StopRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this stop runs default response has a 3xx status code
func (o *StopRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this stop runs default response has a 4xx status code
func (o *StopRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this stop runs default response has a 5xx status code
func (o *StopRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this stop runs default response a status code equal to that given
func (o *StopRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the stop runs default response
func (o *StopRunsDefault) Code() int {
	return o._statusCode
}

func (o *StopRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] StopRuns default  %+v", o._statusCode, o.Payload)
}

func (o *StopRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] StopRuns default  %+v", o._statusCode, o.Payload)
}

func (o *StopRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *StopRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
