// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// ArchiveRunReader is a Reader for the ArchiveRun structure.
type ArchiveRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewArchiveRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewArchiveRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewArchiveRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewArchiveRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewArchiveRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewArchiveRunOK creates a ArchiveRunOK with default headers values
func NewArchiveRunOK() *ArchiveRunOK {
	return &ArchiveRunOK{}
}

/*
ArchiveRunOK describes a response with status code 200, with default header values.

A successful response.
*/
type ArchiveRunOK struct {
}

func (o *ArchiveRunOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/archive][%d] archiveRunOK ", 200)
}

func (o *ArchiveRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewArchiveRunNoContent creates a ArchiveRunNoContent with default headers values
func NewArchiveRunNoContent() *ArchiveRunNoContent {
	return &ArchiveRunNoContent{}
}

/*
ArchiveRunNoContent describes a response with status code 204, with default header values.

No content.
*/
type ArchiveRunNoContent struct {
	Payload interface{}
}

func (o *ArchiveRunNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/archive][%d] archiveRunNoContent  %+v", 204, o.Payload)
}
func (o *ArchiveRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ArchiveRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveRunForbidden creates a ArchiveRunForbidden with default headers values
func NewArchiveRunForbidden() *ArchiveRunForbidden {
	return &ArchiveRunForbidden{}
}

/*
ArchiveRunForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type ArchiveRunForbidden struct {
	Payload interface{}
}

func (o *ArchiveRunForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/archive][%d] archiveRunForbidden  %+v", 403, o.Payload)
}
func (o *ArchiveRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ArchiveRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveRunNotFound creates a ArchiveRunNotFound with default headers values
func NewArchiveRunNotFound() *ArchiveRunNotFound {
	return &ArchiveRunNotFound{}
}

/*
ArchiveRunNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type ArchiveRunNotFound struct {
	Payload interface{}
}

func (o *ArchiveRunNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/archive][%d] archiveRunNotFound  %+v", 404, o.Payload)
}
func (o *ArchiveRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ArchiveRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveRunDefault creates a ArchiveRunDefault with default headers values
func NewArchiveRunDefault(code int) *ArchiveRunDefault {
	return &ArchiveRunDefault{
		_statusCode: code,
	}
}

/*
ArchiveRunDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ArchiveRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the archive run default response
func (o *ArchiveRunDefault) Code() int {
	return o._statusCode
}

func (o *ArchiveRunDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{entity}/runs/{uuid}/archive][%d] ArchiveRun default  %+v", o._statusCode, o.Payload)
}
func (o *ArchiveRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ArchiveRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
