// Code generated by go-swagger; DO NOT EDIT.

package organizations_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// OrganizationLicenseReader is a Reader for the OrganizationLicense structure.
type OrganizationLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrganizationLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrganizationLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewOrganizationLicenseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewOrganizationLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOrganizationLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewOrganizationLicenseDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrganizationLicenseOK creates a OrganizationLicenseOK with default headers values
func NewOrganizationLicenseOK() *OrganizationLicenseOK {
	return &OrganizationLicenseOK{}
}

/*
OrganizationLicenseOK describes a response with status code 200, with default header values.

A successful response.
*/
type OrganizationLicenseOK struct {
	Payload *service_model.V1Organization
}

// IsSuccess returns true when this organization license o k response has a 2xx status code
func (o *OrganizationLicenseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this organization license o k response has a 3xx status code
func (o *OrganizationLicenseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this organization license o k response has a 4xx status code
func (o *OrganizationLicenseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this organization license o k response has a 5xx status code
func (o *OrganizationLicenseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this organization license o k response a status code equal to that given
func (o *OrganizationLicenseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the organization license o k response
func (o *OrganizationLicenseOK) Code() int {
	return 200
}

func (o *OrganizationLicenseOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseOK  %+v", 200, o.Payload)
}

func (o *OrganizationLicenseOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseOK  %+v", 200, o.Payload)
}

func (o *OrganizationLicenseOK) GetPayload() *service_model.V1Organization {
	return o.Payload
}

func (o *OrganizationLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationLicenseNoContent creates a OrganizationLicenseNoContent with default headers values
func NewOrganizationLicenseNoContent() *OrganizationLicenseNoContent {
	return &OrganizationLicenseNoContent{}
}

/*
OrganizationLicenseNoContent describes a response with status code 204, with default header values.

No content.
*/
type OrganizationLicenseNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this organization license no content response has a 2xx status code
func (o *OrganizationLicenseNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this organization license no content response has a 3xx status code
func (o *OrganizationLicenseNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this organization license no content response has a 4xx status code
func (o *OrganizationLicenseNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this organization license no content response has a 5xx status code
func (o *OrganizationLicenseNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this organization license no content response a status code equal to that given
func (o *OrganizationLicenseNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the organization license no content response
func (o *OrganizationLicenseNoContent) Code() int {
	return 204
}

func (o *OrganizationLicenseNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseNoContent  %+v", 204, o.Payload)
}

func (o *OrganizationLicenseNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseNoContent  %+v", 204, o.Payload)
}

func (o *OrganizationLicenseNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *OrganizationLicenseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationLicenseForbidden creates a OrganizationLicenseForbidden with default headers values
func NewOrganizationLicenseForbidden() *OrganizationLicenseForbidden {
	return &OrganizationLicenseForbidden{}
}

/*
OrganizationLicenseForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type OrganizationLicenseForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this organization license forbidden response has a 2xx status code
func (o *OrganizationLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this organization license forbidden response has a 3xx status code
func (o *OrganizationLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this organization license forbidden response has a 4xx status code
func (o *OrganizationLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this organization license forbidden response has a 5xx status code
func (o *OrganizationLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this organization license forbidden response a status code equal to that given
func (o *OrganizationLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the organization license forbidden response
func (o *OrganizationLicenseForbidden) Code() int {
	return 403
}

func (o *OrganizationLicenseForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseForbidden  %+v", 403, o.Payload)
}

func (o *OrganizationLicenseForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseForbidden  %+v", 403, o.Payload)
}

func (o *OrganizationLicenseForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *OrganizationLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationLicenseNotFound creates a OrganizationLicenseNotFound with default headers values
func NewOrganizationLicenseNotFound() *OrganizationLicenseNotFound {
	return &OrganizationLicenseNotFound{}
}

/*
OrganizationLicenseNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type OrganizationLicenseNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this organization license not found response has a 2xx status code
func (o *OrganizationLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this organization license not found response has a 3xx status code
func (o *OrganizationLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this organization license not found response has a 4xx status code
func (o *OrganizationLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this organization license not found response has a 5xx status code
func (o *OrganizationLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this organization license not found response a status code equal to that given
func (o *OrganizationLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the organization license not found response
func (o *OrganizationLicenseNotFound) Code() int {
	return 404
}

func (o *OrganizationLicenseNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseNotFound  %+v", 404, o.Payload)
}

func (o *OrganizationLicenseNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] organizationLicenseNotFound  %+v", 404, o.Payload)
}

func (o *OrganizationLicenseNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *OrganizationLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationLicenseDefault creates a OrganizationLicenseDefault with default headers values
func NewOrganizationLicenseDefault(code int) *OrganizationLicenseDefault {
	return &OrganizationLicenseDefault{
		_statusCode: code,
	}
}

/*
OrganizationLicenseDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type OrganizationLicenseDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this organization license default response has a 2xx status code
func (o *OrganizationLicenseDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this organization license default response has a 3xx status code
func (o *OrganizationLicenseDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this organization license default response has a 4xx status code
func (o *OrganizationLicenseDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this organization license default response has a 5xx status code
func (o *OrganizationLicenseDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this organization license default response a status code equal to that given
func (o *OrganizationLicenseDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the organization license default response
func (o *OrganizationLicenseDefault) Code() int {
	return o._statusCode
}

func (o *OrganizationLicenseDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] OrganizationLicense default  %+v", o._statusCode, o.Payload)
}

func (o *OrganizationLicenseDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/license][%d] OrganizationLicense default  %+v", o._statusCode, o.Payload)
}

func (o *OrganizationLicenseDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *OrganizationLicenseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
