// Code generated by go-swagger; DO NOT EDIT.

package organizations_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// SkipOrganizationRunsReader is a Reader for the SkipOrganizationRuns structure.
type SkipOrganizationRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SkipOrganizationRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSkipOrganizationRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSkipOrganizationRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSkipOrganizationRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSkipOrganizationRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSkipOrganizationRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSkipOrganizationRunsOK creates a SkipOrganizationRunsOK with default headers values
func NewSkipOrganizationRunsOK() *SkipOrganizationRunsOK {
	return &SkipOrganizationRunsOK{}
}

/*
SkipOrganizationRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SkipOrganizationRunsOK struct {
}

// IsSuccess returns true when this skip organization runs o k response has a 2xx status code
func (o *SkipOrganizationRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip organization runs o k response has a 3xx status code
func (o *SkipOrganizationRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip organization runs o k response has a 4xx status code
func (o *SkipOrganizationRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip organization runs o k response has a 5xx status code
func (o *SkipOrganizationRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this skip organization runs o k response a status code equal to that given
func (o *SkipOrganizationRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the skip organization runs o k response
func (o *SkipOrganizationRunsOK) Code() int {
	return 200
}

func (o *SkipOrganizationRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsOK ", 200)
}

func (o *SkipOrganizationRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsOK ", 200)
}

func (o *SkipOrganizationRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSkipOrganizationRunsNoContent creates a SkipOrganizationRunsNoContent with default headers values
func NewSkipOrganizationRunsNoContent() *SkipOrganizationRunsNoContent {
	return &SkipOrganizationRunsNoContent{}
}

/*
SkipOrganizationRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type SkipOrganizationRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this skip organization runs no content response has a 2xx status code
func (o *SkipOrganizationRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip organization runs no content response has a 3xx status code
func (o *SkipOrganizationRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip organization runs no content response has a 4xx status code
func (o *SkipOrganizationRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip organization runs no content response has a 5xx status code
func (o *SkipOrganizationRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this skip organization runs no content response a status code equal to that given
func (o *SkipOrganizationRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the skip organization runs no content response
func (o *SkipOrganizationRunsNoContent) Code() int {
	return 204
}

func (o *SkipOrganizationRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipOrganizationRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipOrganizationRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipOrganizationRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipOrganizationRunsForbidden creates a SkipOrganizationRunsForbidden with default headers values
func NewSkipOrganizationRunsForbidden() *SkipOrganizationRunsForbidden {
	return &SkipOrganizationRunsForbidden{}
}

/*
SkipOrganizationRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type SkipOrganizationRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this skip organization runs forbidden response has a 2xx status code
func (o *SkipOrganizationRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip organization runs forbidden response has a 3xx status code
func (o *SkipOrganizationRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip organization runs forbidden response has a 4xx status code
func (o *SkipOrganizationRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip organization runs forbidden response has a 5xx status code
func (o *SkipOrganizationRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this skip organization runs forbidden response a status code equal to that given
func (o *SkipOrganizationRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the skip organization runs forbidden response
func (o *SkipOrganizationRunsForbidden) Code() int {
	return 403
}

func (o *SkipOrganizationRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipOrganizationRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipOrganizationRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipOrganizationRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipOrganizationRunsNotFound creates a SkipOrganizationRunsNotFound with default headers values
func NewSkipOrganizationRunsNotFound() *SkipOrganizationRunsNotFound {
	return &SkipOrganizationRunsNotFound{}
}

/*
SkipOrganizationRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type SkipOrganizationRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this skip organization runs not found response has a 2xx status code
func (o *SkipOrganizationRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip organization runs not found response has a 3xx status code
func (o *SkipOrganizationRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip organization runs not found response has a 4xx status code
func (o *SkipOrganizationRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip organization runs not found response has a 5xx status code
func (o *SkipOrganizationRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this skip organization runs not found response a status code equal to that given
func (o *SkipOrganizationRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the skip organization runs not found response
func (o *SkipOrganizationRunsNotFound) Code() int {
	return 404
}

func (o *SkipOrganizationRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipOrganizationRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] skipOrganizationRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipOrganizationRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipOrganizationRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipOrganizationRunsDefault creates a SkipOrganizationRunsDefault with default headers values
func NewSkipOrganizationRunsDefault(code int) *SkipOrganizationRunsDefault {
	return &SkipOrganizationRunsDefault{
		_statusCode: code,
	}
}

/*
SkipOrganizationRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SkipOrganizationRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this skip organization runs default response has a 2xx status code
func (o *SkipOrganizationRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this skip organization runs default response has a 3xx status code
func (o *SkipOrganizationRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this skip organization runs default response has a 4xx status code
func (o *SkipOrganizationRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this skip organization runs default response has a 5xx status code
func (o *SkipOrganizationRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this skip organization runs default response a status code equal to that given
func (o *SkipOrganizationRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the skip organization runs default response
func (o *SkipOrganizationRunsDefault) Code() int {
	return o._statusCode
}

func (o *SkipOrganizationRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] SkipOrganizationRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipOrganizationRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/runs/Skip][%d] SkipOrganizationRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipOrganizationRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *SkipOrganizationRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
