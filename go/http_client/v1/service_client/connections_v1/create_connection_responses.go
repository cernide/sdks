// Code generated by go-swagger; DO NOT EDIT.

package connections_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// CreateConnectionReader is a Reader for the CreateConnection structure.
type CreateConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewCreateConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCreateConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateConnectionOK creates a CreateConnectionOK with default headers values
func NewCreateConnectionOK() *CreateConnectionOK {
	return &CreateConnectionOK{}
}

/*
CreateConnectionOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateConnectionOK struct {
	Payload *service_model.V1ConnectionResponse
}

// IsSuccess returns true when this create connection o k response has a 2xx status code
func (o *CreateConnectionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create connection o k response has a 3xx status code
func (o *CreateConnectionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create connection o k response has a 4xx status code
func (o *CreateConnectionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create connection o k response has a 5xx status code
func (o *CreateConnectionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create connection o k response a status code equal to that given
func (o *CreateConnectionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create connection o k response
func (o *CreateConnectionOK) Code() int {
	return 200
}

func (o *CreateConnectionOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionOK  %+v", 200, o.Payload)
}

func (o *CreateConnectionOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionOK  %+v", 200, o.Payload)
}

func (o *CreateConnectionOK) GetPayload() *service_model.V1ConnectionResponse {
	return o.Payload
}

func (o *CreateConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ConnectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConnectionNoContent creates a CreateConnectionNoContent with default headers values
func NewCreateConnectionNoContent() *CreateConnectionNoContent {
	return &CreateConnectionNoContent{}
}

/*
CreateConnectionNoContent describes a response with status code 204, with default header values.

No content.
*/
type CreateConnectionNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this create connection no content response has a 2xx status code
func (o *CreateConnectionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create connection no content response has a 3xx status code
func (o *CreateConnectionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create connection no content response has a 4xx status code
func (o *CreateConnectionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this create connection no content response has a 5xx status code
func (o *CreateConnectionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this create connection no content response a status code equal to that given
func (o *CreateConnectionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the create connection no content response
func (o *CreateConnectionNoContent) Code() int {
	return 204
}

func (o *CreateConnectionNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionNoContent  %+v", 204, o.Payload)
}

func (o *CreateConnectionNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionNoContent  %+v", 204, o.Payload)
}

func (o *CreateConnectionNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConnectionForbidden creates a CreateConnectionForbidden with default headers values
func NewCreateConnectionForbidden() *CreateConnectionForbidden {
	return &CreateConnectionForbidden{}
}

/*
CreateConnectionForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type CreateConnectionForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this create connection forbidden response has a 2xx status code
func (o *CreateConnectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create connection forbidden response has a 3xx status code
func (o *CreateConnectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create connection forbidden response has a 4xx status code
func (o *CreateConnectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create connection forbidden response has a 5xx status code
func (o *CreateConnectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create connection forbidden response a status code equal to that given
func (o *CreateConnectionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create connection forbidden response
func (o *CreateConnectionForbidden) Code() int {
	return 403
}

func (o *CreateConnectionForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionForbidden  %+v", 403, o.Payload)
}

func (o *CreateConnectionForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionForbidden  %+v", 403, o.Payload)
}

func (o *CreateConnectionForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConnectionNotFound creates a CreateConnectionNotFound with default headers values
func NewCreateConnectionNotFound() *CreateConnectionNotFound {
	return &CreateConnectionNotFound{}
}

/*
CreateConnectionNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type CreateConnectionNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this create connection not found response has a 2xx status code
func (o *CreateConnectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create connection not found response has a 3xx status code
func (o *CreateConnectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create connection not found response has a 4xx status code
func (o *CreateConnectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create connection not found response has a 5xx status code
func (o *CreateConnectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create connection not found response a status code equal to that given
func (o *CreateConnectionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create connection not found response
func (o *CreateConnectionNotFound) Code() int {
	return 404
}

func (o *CreateConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateConnectionNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] createConnectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateConnectionNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConnectionDefault creates a CreateConnectionDefault with default headers values
func NewCreateConnectionDefault(code int) *CreateConnectionDefault {
	return &CreateConnectionDefault{
		_statusCode: code,
	}
}

/*
CreateConnectionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreateConnectionDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this create connection default response has a 2xx status code
func (o *CreateConnectionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create connection default response has a 3xx status code
func (o *CreateConnectionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create connection default response has a 4xx status code
func (o *CreateConnectionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create connection default response has a 5xx status code
func (o *CreateConnectionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create connection default response a status code equal to that given
func (o *CreateConnectionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create connection default response
func (o *CreateConnectionDefault) Code() int {
	return o._statusCode
}

func (o *CreateConnectionDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] CreateConnection default  %+v", o._statusCode, o.Payload)
}

func (o *CreateConnectionDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/connections][%d] CreateConnection default  %+v", o._statusCode, o.Payload)
}

func (o *CreateConnectionDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *CreateConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
