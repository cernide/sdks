// Copyright 2018-2022 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchDashboardReader is a Reader for the PatchDashboard structure.
type PatchDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchDashboardOK creates a PatchDashboardOK with default headers values
func NewPatchDashboardOK() *PatchDashboardOK {
	return &PatchDashboardOK{}
}

/* PatchDashboardOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchDashboardOK struct {
	Payload *service_model.V1Dashboard
}

// IsSuccess returns true when this patch dashboard o k response has a 2xx status code
func (o *PatchDashboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch dashboard o k response has a 3xx status code
func (o *PatchDashboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch dashboard o k response has a 4xx status code
func (o *PatchDashboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch dashboard o k response has a 5xx status code
func (o *PatchDashboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch dashboard o k response a status code equal to that given
func (o *PatchDashboardOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchDashboardOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchDashboardOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *PatchDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDashboardNoContent creates a PatchDashboardNoContent with default headers values
func NewPatchDashboardNoContent() *PatchDashboardNoContent {
	return &PatchDashboardNoContent{}
}

/* PatchDashboardNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchDashboardNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch dashboard no content response has a 2xx status code
func (o *PatchDashboardNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch dashboard no content response has a 3xx status code
func (o *PatchDashboardNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch dashboard no content response has a 4xx status code
func (o *PatchDashboardNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch dashboard no content response has a 5xx status code
func (o *PatchDashboardNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch dashboard no content response a status code equal to that given
func (o *PatchDashboardNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PatchDashboardNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardNoContent  %+v", 204, o.Payload)
}

func (o *PatchDashboardNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardNoContent  %+v", 204, o.Payload)
}

func (o *PatchDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDashboardForbidden creates a PatchDashboardForbidden with default headers values
func NewPatchDashboardForbidden() *PatchDashboardForbidden {
	return &PatchDashboardForbidden{}
}

/* PatchDashboardForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchDashboardForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch dashboard forbidden response has a 2xx status code
func (o *PatchDashboardForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch dashboard forbidden response has a 3xx status code
func (o *PatchDashboardForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch dashboard forbidden response has a 4xx status code
func (o *PatchDashboardForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch dashboard forbidden response has a 5xx status code
func (o *PatchDashboardForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch dashboard forbidden response a status code equal to that given
func (o *PatchDashboardForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchDashboardForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardForbidden  %+v", 403, o.Payload)
}

func (o *PatchDashboardForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardForbidden  %+v", 403, o.Payload)
}

func (o *PatchDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDashboardNotFound creates a PatchDashboardNotFound with default headers values
func NewPatchDashboardNotFound() *PatchDashboardNotFound {
	return &PatchDashboardNotFound{}
}

/* PatchDashboardNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchDashboardNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch dashboard not found response has a 2xx status code
func (o *PatchDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch dashboard not found response has a 3xx status code
func (o *PatchDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch dashboard not found response has a 4xx status code
func (o *PatchDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch dashboard not found response has a 5xx status code
func (o *PatchDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch dashboard not found response a status code equal to that given
func (o *PatchDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchDashboardNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardNotFound  %+v", 404, o.Payload)
}

func (o *PatchDashboardNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] patchDashboardNotFound  %+v", 404, o.Payload)
}

func (o *PatchDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDashboardDefault creates a PatchDashboardDefault with default headers values
func NewPatchDashboardDefault(code int) *PatchDashboardDefault {
	return &PatchDashboardDefault{
		_statusCode: code,
	}
}

/* PatchDashboardDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch dashboard default response
func (o *PatchDashboardDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch dashboard default response has a 2xx status code
func (o *PatchDashboardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch dashboard default response has a 3xx status code
func (o *PatchDashboardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch dashboard default response has a 4xx status code
func (o *PatchDashboardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch dashboard default response has a 5xx status code
func (o *PatchDashboardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch dashboard default response a status code equal to that given
func (o *PatchDashboardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchDashboardDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] PatchDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDashboardDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] PatchDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
