// Code generated by go-swagger; DO NOT EDIT.

package project_dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// PatchProjectDashboardReader is a Reader for the PatchProjectDashboard structure.
type PatchProjectDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProjectDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchProjectDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchProjectDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchProjectDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchProjectDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchProjectDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchProjectDashboardOK creates a PatchProjectDashboardOK with default headers values
func NewPatchProjectDashboardOK() *PatchProjectDashboardOK {
	return &PatchProjectDashboardOK{}
}

/*
PatchProjectDashboardOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchProjectDashboardOK struct {
	Payload *service_model.V1Dashboard
}

// IsSuccess returns true when this patch project dashboard o k response has a 2xx status code
func (o *PatchProjectDashboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch project dashboard o k response has a 3xx status code
func (o *PatchProjectDashboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project dashboard o k response has a 4xx status code
func (o *PatchProjectDashboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project dashboard o k response has a 5xx status code
func (o *PatchProjectDashboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project dashboard o k response a status code equal to that given
func (o *PatchProjectDashboardOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch project dashboard o k response
func (o *PatchProjectDashboardOK) Code() int {
	return 200
}

func (o *PatchProjectDashboardOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchProjectDashboardOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchProjectDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *PatchProjectDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectDashboardNoContent creates a PatchProjectDashboardNoContent with default headers values
func NewPatchProjectDashboardNoContent() *PatchProjectDashboardNoContent {
	return &PatchProjectDashboardNoContent{}
}

/*
PatchProjectDashboardNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchProjectDashboardNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project dashboard no content response has a 2xx status code
func (o *PatchProjectDashboardNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch project dashboard no content response has a 3xx status code
func (o *PatchProjectDashboardNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project dashboard no content response has a 4xx status code
func (o *PatchProjectDashboardNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project dashboard no content response has a 5xx status code
func (o *PatchProjectDashboardNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project dashboard no content response a status code equal to that given
func (o *PatchProjectDashboardNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the patch project dashboard no content response
func (o *PatchProjectDashboardNoContent) Code() int {
	return 204
}

func (o *PatchProjectDashboardNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardNoContent  %+v", 204, o.Payload)
}

func (o *PatchProjectDashboardNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardNoContent  %+v", 204, o.Payload)
}

func (o *PatchProjectDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectDashboardForbidden creates a PatchProjectDashboardForbidden with default headers values
func NewPatchProjectDashboardForbidden() *PatchProjectDashboardForbidden {
	return &PatchProjectDashboardForbidden{}
}

/*
PatchProjectDashboardForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchProjectDashboardForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project dashboard forbidden response has a 2xx status code
func (o *PatchProjectDashboardForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project dashboard forbidden response has a 3xx status code
func (o *PatchProjectDashboardForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project dashboard forbidden response has a 4xx status code
func (o *PatchProjectDashboardForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project dashboard forbidden response has a 5xx status code
func (o *PatchProjectDashboardForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project dashboard forbidden response a status code equal to that given
func (o *PatchProjectDashboardForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch project dashboard forbidden response
func (o *PatchProjectDashboardForbidden) Code() int {
	return 403
}

func (o *PatchProjectDashboardForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectDashboardForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectDashboardNotFound creates a PatchProjectDashboardNotFound with default headers values
func NewPatchProjectDashboardNotFound() *PatchProjectDashboardNotFound {
	return &PatchProjectDashboardNotFound{}
}

/*
PatchProjectDashboardNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchProjectDashboardNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project dashboard not found response has a 2xx status code
func (o *PatchProjectDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project dashboard not found response has a 3xx status code
func (o *PatchProjectDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project dashboard not found response has a 4xx status code
func (o *PatchProjectDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project dashboard not found response has a 5xx status code
func (o *PatchProjectDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project dashboard not found response a status code equal to that given
func (o *PatchProjectDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch project dashboard not found response
func (o *PatchProjectDashboardNotFound) Code() int {
	return 404
}

func (o *PatchProjectDashboardNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardNotFound  %+v", 404, o.Payload)
}

func (o *PatchProjectDashboardNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] patchProjectDashboardNotFound  %+v", 404, o.Payload)
}

func (o *PatchProjectDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectDashboardDefault creates a PatchProjectDashboardDefault with default headers values
func NewPatchProjectDashboardDefault(code int) *PatchProjectDashboardDefault {
	return &PatchProjectDashboardDefault{
		_statusCode: code,
	}
}

/*
PatchProjectDashboardDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchProjectDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this patch project dashboard default response has a 2xx status code
func (o *PatchProjectDashboardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch project dashboard default response has a 3xx status code
func (o *PatchProjectDashboardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch project dashboard default response has a 4xx status code
func (o *PatchProjectDashboardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch project dashboard default response has a 5xx status code
func (o *PatchProjectDashboardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch project dashboard default response a status code equal to that given
func (o *PatchProjectDashboardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch project dashboard default response
func (o *PatchProjectDashboardDefault) Code() int {
	return o._statusCode
}

func (o *PatchProjectDashboardDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] PatchProjectDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProjectDashboardDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] PatchProjectDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProjectDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchProjectDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
