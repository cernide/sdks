// Code generated by go-swagger; DO NOT EDIT.

package tags_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// LoadTagsReader is a Reader for the LoadTags structure.
type LoadTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoadTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewLoadTagsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewLoadTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoadTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLoadTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoadTagsOK creates a LoadTagsOK with default headers values
func NewLoadTagsOK() *LoadTagsOK {
	return &LoadTagsOK{}
}

/*
LoadTagsOK describes a response with status code 200, with default header values.

A successful response.
*/
type LoadTagsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this load tags o k response has a 2xx status code
func (o *LoadTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this load tags o k response has a 3xx status code
func (o *LoadTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load tags o k response has a 4xx status code
func (o *LoadTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this load tags o k response has a 5xx status code
func (o *LoadTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this load tags o k response a status code equal to that given
func (o *LoadTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the load tags o k response
func (o *LoadTagsOK) Code() int {
	return 200
}

func (o *LoadTagsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsOK  %+v", 200, o.Payload)
}

func (o *LoadTagsOK) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsOK  %+v", 200, o.Payload)
}

func (o *LoadTagsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *LoadTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTagsNoContent creates a LoadTagsNoContent with default headers values
func NewLoadTagsNoContent() *LoadTagsNoContent {
	return &LoadTagsNoContent{}
}

/*
LoadTagsNoContent describes a response with status code 204, with default header values.

No content.
*/
type LoadTagsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this load tags no content response has a 2xx status code
func (o *LoadTagsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this load tags no content response has a 3xx status code
func (o *LoadTagsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load tags no content response has a 4xx status code
func (o *LoadTagsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this load tags no content response has a 5xx status code
func (o *LoadTagsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this load tags no content response a status code equal to that given
func (o *LoadTagsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the load tags no content response
func (o *LoadTagsNoContent) Code() int {
	return 204
}

func (o *LoadTagsNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsNoContent  %+v", 204, o.Payload)
}

func (o *LoadTagsNoContent) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsNoContent  %+v", 204, o.Payload)
}

func (o *LoadTagsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *LoadTagsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTagsForbidden creates a LoadTagsForbidden with default headers values
func NewLoadTagsForbidden() *LoadTagsForbidden {
	return &LoadTagsForbidden{}
}

/*
LoadTagsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type LoadTagsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this load tags forbidden response has a 2xx status code
func (o *LoadTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load tags forbidden response has a 3xx status code
func (o *LoadTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load tags forbidden response has a 4xx status code
func (o *LoadTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this load tags forbidden response has a 5xx status code
func (o *LoadTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this load tags forbidden response a status code equal to that given
func (o *LoadTagsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the load tags forbidden response
func (o *LoadTagsForbidden) Code() int {
	return 403
}

func (o *LoadTagsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsForbidden  %+v", 403, o.Payload)
}

func (o *LoadTagsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsForbidden  %+v", 403, o.Payload)
}

func (o *LoadTagsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *LoadTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTagsNotFound creates a LoadTagsNotFound with default headers values
func NewLoadTagsNotFound() *LoadTagsNotFound {
	return &LoadTagsNotFound{}
}

/*
LoadTagsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type LoadTagsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this load tags not found response has a 2xx status code
func (o *LoadTagsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load tags not found response has a 3xx status code
func (o *LoadTagsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load tags not found response has a 4xx status code
func (o *LoadTagsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this load tags not found response has a 5xx status code
func (o *LoadTagsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this load tags not found response a status code equal to that given
func (o *LoadTagsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the load tags not found response
func (o *LoadTagsNotFound) Code() int {
	return 404
}

func (o *LoadTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsNotFound  %+v", 404, o.Payload)
}

func (o *LoadTagsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] loadTagsNotFound  %+v", 404, o.Payload)
}

func (o *LoadTagsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *LoadTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTagsDefault creates a LoadTagsDefault with default headers values
func NewLoadTagsDefault(code int) *LoadTagsDefault {
	return &LoadTagsDefault{
		_statusCode: code,
	}
}

/*
LoadTagsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type LoadTagsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this load tags default response has a 2xx status code
func (o *LoadTagsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this load tags default response has a 3xx status code
func (o *LoadTagsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this load tags default response has a 4xx status code
func (o *LoadTagsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this load tags default response has a 5xx status code
func (o *LoadTagsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this load tags default response a status code equal to that given
func (o *LoadTagsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the load tags default response
func (o *LoadTagsDefault) Code() int {
	return o._statusCode
}

func (o *LoadTagsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] LoadTags default  %+v", o._statusCode, o.Payload)
}

func (o *LoadTagsDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/tags/load][%d] LoadTags default  %+v", o._statusCode, o.Payload)
}

func (o *LoadTagsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *LoadTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
