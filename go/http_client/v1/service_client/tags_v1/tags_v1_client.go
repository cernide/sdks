// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package tags_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTag(params *CreateTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTagOK, *CreateTagNoContent, error)

	DeleteTag(params *DeleteTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTagOK, *DeleteTagNoContent, error)

	GetTag(params *GetTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagOK, *GetTagNoContent, error)

	ListTags(params *ListTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTagsOK, *ListTagsNoContent, error)

	LoadTags(params *LoadTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoadTagsOK, *LoadTagsNoContent, error)

	PatchTag(params *PatchTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTagOK, *PatchTagNoContent, error)

	SyncTags(params *SyncTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncTagsOK, *SyncTagsNoContent, error)

	UpdateTag(params *UpdateTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTagOK, *UpdateTagNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTag creates tag
*/
func (a *Client) CreateTag(params *CreateTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTagOK, *CreateTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTag",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTagOK:
		return value, nil, nil
	case *CreateTagNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTagDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteTag deletes tag
*/
func (a *Client) DeleteTag(params *DeleteTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTagOK, *DeleteTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTag",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/tags/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTagOK:
		return value, nil, nil
	case *DeleteTagNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTagDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetTag gets tag
*/
func (a *Client) GetTag(params *GetTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagOK, *GetTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTag",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/tags/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTagOK:
		return value, nil, nil
	case *GetTagNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTagDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTags lists tags
*/
func (a *Client) ListTags(params *ListTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTagsOK, *ListTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTags",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListTagsOK:
		return value, nil, nil
	case *ListTagsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTagsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LoadTags loads tags
*/
func (a *Client) LoadTags(params *LoadTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoadTagsOK, *LoadTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoadTags",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/tags/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LoadTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LoadTagsOK:
		return value, nil, nil
	case *LoadTagsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoadTagsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchTag patches tag
*/
func (a *Client) PatchTag(params *PatchTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTagOK, *PatchTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchTag",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/tags/{tag.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchTagOK:
		return value, nil, nil
	case *PatchTagNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTagDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncTags syncs tags
*/
func (a *Client) SyncTags(params *SyncTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncTagsOK, *SyncTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SyncTags",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/tags/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncTagsOK:
		return value, nil, nil
	case *SyncTagsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncTagsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateTag updates tag
*/
func (a *Client) UpdateTag(params *UpdateTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTagOK, *UpdateTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTag",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/tags/{tag.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTagOK:
		return value, nil, nil
	case *UpdateTagNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTagDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
