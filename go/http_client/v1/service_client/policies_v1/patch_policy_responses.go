// Code generated by go-swagger; DO NOT EDIT.

package policies_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// PatchPolicyReader is a Reader for the PatchPolicy structure.
type PatchPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchPolicyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchPolicyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchPolicyOK creates a PatchPolicyOK with default headers values
func NewPatchPolicyOK() *PatchPolicyOK {
	return &PatchPolicyOK{}
}

/*
PatchPolicyOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchPolicyOK struct {
	Payload *service_model.V1Policy
}

// IsSuccess returns true when this patch policy o k response has a 2xx status code
func (o *PatchPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch policy o k response has a 3xx status code
func (o *PatchPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy o k response has a 4xx status code
func (o *PatchPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch policy o k response has a 5xx status code
func (o *PatchPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy o k response a status code equal to that given
func (o *PatchPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch policy o k response
func (o *PatchPolicyOK) Code() int {
	return 200
}

func (o *PatchPolicyOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyOK  %+v", 200, o.Payload)
}

func (o *PatchPolicyOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyOK  %+v", 200, o.Payload)
}

func (o *PatchPolicyOK) GetPayload() *service_model.V1Policy {
	return o.Payload
}

func (o *PatchPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPolicyNoContent creates a PatchPolicyNoContent with default headers values
func NewPatchPolicyNoContent() *PatchPolicyNoContent {
	return &PatchPolicyNoContent{}
}

/*
PatchPolicyNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchPolicyNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch policy no content response has a 2xx status code
func (o *PatchPolicyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch policy no content response has a 3xx status code
func (o *PatchPolicyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy no content response has a 4xx status code
func (o *PatchPolicyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch policy no content response has a 5xx status code
func (o *PatchPolicyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy no content response a status code equal to that given
func (o *PatchPolicyNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the patch policy no content response
func (o *PatchPolicyNoContent) Code() int {
	return 204
}

func (o *PatchPolicyNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyNoContent  %+v", 204, o.Payload)
}

func (o *PatchPolicyNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyNoContent  %+v", 204, o.Payload)
}

func (o *PatchPolicyNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPolicyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPolicyForbidden creates a PatchPolicyForbidden with default headers values
func NewPatchPolicyForbidden() *PatchPolicyForbidden {
	return &PatchPolicyForbidden{}
}

/*
PatchPolicyForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchPolicyForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch policy forbidden response has a 2xx status code
func (o *PatchPolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch policy forbidden response has a 3xx status code
func (o *PatchPolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy forbidden response has a 4xx status code
func (o *PatchPolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch policy forbidden response has a 5xx status code
func (o *PatchPolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy forbidden response a status code equal to that given
func (o *PatchPolicyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch policy forbidden response
func (o *PatchPolicyForbidden) Code() int {
	return 403
}

func (o *PatchPolicyForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyForbidden  %+v", 403, o.Payload)
}

func (o *PatchPolicyForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyForbidden  %+v", 403, o.Payload)
}

func (o *PatchPolicyForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPolicyNotFound creates a PatchPolicyNotFound with default headers values
func NewPatchPolicyNotFound() *PatchPolicyNotFound {
	return &PatchPolicyNotFound{}
}

/*
PatchPolicyNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchPolicyNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch policy not found response has a 2xx status code
func (o *PatchPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch policy not found response has a 3xx status code
func (o *PatchPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy not found response has a 4xx status code
func (o *PatchPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch policy not found response has a 5xx status code
func (o *PatchPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy not found response a status code equal to that given
func (o *PatchPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch policy not found response
func (o *PatchPolicyNotFound) Code() int {
	return 404
}

func (o *PatchPolicyNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyNotFound  %+v", 404, o.Payload)
}

func (o *PatchPolicyNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] patchPolicyNotFound  %+v", 404, o.Payload)
}

func (o *PatchPolicyNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPolicyDefault creates a PatchPolicyDefault with default headers values
func NewPatchPolicyDefault(code int) *PatchPolicyDefault {
	return &PatchPolicyDefault{
		_statusCode: code,
	}
}

/*
PatchPolicyDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchPolicyDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this patch policy default response has a 2xx status code
func (o *PatchPolicyDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch policy default response has a 3xx status code
func (o *PatchPolicyDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch policy default response has a 4xx status code
func (o *PatchPolicyDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch policy default response has a 5xx status code
func (o *PatchPolicyDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch policy default response a status code equal to that given
func (o *PatchPolicyDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch policy default response
func (o *PatchPolicyDefault) Code() int {
	return o._statusCode
}

func (o *PatchPolicyDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] PatchPolicy default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPolicyDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/policies/{policy.uuid}][%d] PatchPolicy default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPolicyDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchPolicyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
