// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// SkipTeamRunsReader is a Reader for the SkipTeamRuns structure.
type SkipTeamRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SkipTeamRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSkipTeamRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSkipTeamRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSkipTeamRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSkipTeamRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSkipTeamRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSkipTeamRunsOK creates a SkipTeamRunsOK with default headers values
func NewSkipTeamRunsOK() *SkipTeamRunsOK {
	return &SkipTeamRunsOK{}
}

/*
SkipTeamRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SkipTeamRunsOK struct {
}

// IsSuccess returns true when this skip team runs o k response has a 2xx status code
func (o *SkipTeamRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip team runs o k response has a 3xx status code
func (o *SkipTeamRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip team runs o k response has a 4xx status code
func (o *SkipTeamRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip team runs o k response has a 5xx status code
func (o *SkipTeamRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this skip team runs o k response a status code equal to that given
func (o *SkipTeamRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the skip team runs o k response
func (o *SkipTeamRunsOK) Code() int {
	return 200
}

func (o *SkipTeamRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsOK ", 200)
}

func (o *SkipTeamRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsOK ", 200)
}

func (o *SkipTeamRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSkipTeamRunsNoContent creates a SkipTeamRunsNoContent with default headers values
func NewSkipTeamRunsNoContent() *SkipTeamRunsNoContent {
	return &SkipTeamRunsNoContent{}
}

/*
SkipTeamRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type SkipTeamRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this skip team runs no content response has a 2xx status code
func (o *SkipTeamRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this skip team runs no content response has a 3xx status code
func (o *SkipTeamRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip team runs no content response has a 4xx status code
func (o *SkipTeamRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this skip team runs no content response has a 5xx status code
func (o *SkipTeamRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this skip team runs no content response a status code equal to that given
func (o *SkipTeamRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the skip team runs no content response
func (o *SkipTeamRunsNoContent) Code() int {
	return 204
}

func (o *SkipTeamRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipTeamRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *SkipTeamRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipTeamRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipTeamRunsForbidden creates a SkipTeamRunsForbidden with default headers values
func NewSkipTeamRunsForbidden() *SkipTeamRunsForbidden {
	return &SkipTeamRunsForbidden{}
}

/*
SkipTeamRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type SkipTeamRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this skip team runs forbidden response has a 2xx status code
func (o *SkipTeamRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip team runs forbidden response has a 3xx status code
func (o *SkipTeamRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip team runs forbidden response has a 4xx status code
func (o *SkipTeamRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip team runs forbidden response has a 5xx status code
func (o *SkipTeamRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this skip team runs forbidden response a status code equal to that given
func (o *SkipTeamRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the skip team runs forbidden response
func (o *SkipTeamRunsForbidden) Code() int {
	return 403
}

func (o *SkipTeamRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipTeamRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *SkipTeamRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipTeamRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipTeamRunsNotFound creates a SkipTeamRunsNotFound with default headers values
func NewSkipTeamRunsNotFound() *SkipTeamRunsNotFound {
	return &SkipTeamRunsNotFound{}
}

/*
SkipTeamRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type SkipTeamRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this skip team runs not found response has a 2xx status code
func (o *SkipTeamRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this skip team runs not found response has a 3xx status code
func (o *SkipTeamRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this skip team runs not found response has a 4xx status code
func (o *SkipTeamRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this skip team runs not found response has a 5xx status code
func (o *SkipTeamRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this skip team runs not found response a status code equal to that given
func (o *SkipTeamRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the skip team runs not found response
func (o *SkipTeamRunsNotFound) Code() int {
	return 404
}

func (o *SkipTeamRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipTeamRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] skipTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *SkipTeamRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *SkipTeamRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSkipTeamRunsDefault creates a SkipTeamRunsDefault with default headers values
func NewSkipTeamRunsDefault(code int) *SkipTeamRunsDefault {
	return &SkipTeamRunsDefault{
		_statusCode: code,
	}
}

/*
SkipTeamRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SkipTeamRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this skip team runs default response has a 2xx status code
func (o *SkipTeamRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this skip team runs default response has a 3xx status code
func (o *SkipTeamRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this skip team runs default response has a 4xx status code
func (o *SkipTeamRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this skip team runs default response has a 5xx status code
func (o *SkipTeamRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this skip team runs default response a status code equal to that given
func (o *SkipTeamRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the skip team runs default response
func (o *SkipTeamRunsDefault) Code() int {
	return o._statusCode
}

func (o *SkipTeamRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] SkipTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipTeamRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/Skip][%d] SkipTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *SkipTeamRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *SkipTeamRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
