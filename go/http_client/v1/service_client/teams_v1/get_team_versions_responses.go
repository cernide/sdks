// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// GetTeamVersionsReader is a Reader for the GetTeamVersions structure.
type GetTeamVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetTeamVersionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetTeamVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetTeamVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTeamVersionsOK creates a GetTeamVersionsOK with default headers values
func NewGetTeamVersionsOK() *GetTeamVersionsOK {
	return &GetTeamVersionsOK{}
}

/*
GetTeamVersionsOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetTeamVersionsOK struct {
	Payload *service_model.V1ListProjectVersionsResponse
}

// IsSuccess returns true when this get team versions o k response has a 2xx status code
func (o *GetTeamVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get team versions o k response has a 3xx status code
func (o *GetTeamVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team versions o k response has a 4xx status code
func (o *GetTeamVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get team versions o k response has a 5xx status code
func (o *GetTeamVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get team versions o k response a status code equal to that given
func (o *GetTeamVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get team versions o k response
func (o *GetTeamVersionsOK) Code() int {
	return 200
}

func (o *GetTeamVersionsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsOK  %+v", 200, o.Payload)
}

func (o *GetTeamVersionsOK) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsOK  %+v", 200, o.Payload)
}

func (o *GetTeamVersionsOK) GetPayload() *service_model.V1ListProjectVersionsResponse {
	return o.Payload
}

func (o *GetTeamVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListProjectVersionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamVersionsNoContent creates a GetTeamVersionsNoContent with default headers values
func NewGetTeamVersionsNoContent() *GetTeamVersionsNoContent {
	return &GetTeamVersionsNoContent{}
}

/*
GetTeamVersionsNoContent describes a response with status code 204, with default header values.

No content.
*/
type GetTeamVersionsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this get team versions no content response has a 2xx status code
func (o *GetTeamVersionsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get team versions no content response has a 3xx status code
func (o *GetTeamVersionsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team versions no content response has a 4xx status code
func (o *GetTeamVersionsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this get team versions no content response has a 5xx status code
func (o *GetTeamVersionsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this get team versions no content response a status code equal to that given
func (o *GetTeamVersionsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the get team versions no content response
func (o *GetTeamVersionsNoContent) Code() int {
	return 204
}

func (o *GetTeamVersionsNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsNoContent  %+v", 204, o.Payload)
}

func (o *GetTeamVersionsNoContent) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsNoContent  %+v", 204, o.Payload)
}

func (o *GetTeamVersionsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetTeamVersionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamVersionsForbidden creates a GetTeamVersionsForbidden with default headers values
func NewGetTeamVersionsForbidden() *GetTeamVersionsForbidden {
	return &GetTeamVersionsForbidden{}
}

/*
GetTeamVersionsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type GetTeamVersionsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this get team versions forbidden response has a 2xx status code
func (o *GetTeamVersionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get team versions forbidden response has a 3xx status code
func (o *GetTeamVersionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team versions forbidden response has a 4xx status code
func (o *GetTeamVersionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get team versions forbidden response has a 5xx status code
func (o *GetTeamVersionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get team versions forbidden response a status code equal to that given
func (o *GetTeamVersionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get team versions forbidden response
func (o *GetTeamVersionsForbidden) Code() int {
	return 403
}

func (o *GetTeamVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamVersionsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamVersionsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetTeamVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamVersionsNotFound creates a GetTeamVersionsNotFound with default headers values
func NewGetTeamVersionsNotFound() *GetTeamVersionsNotFound {
	return &GetTeamVersionsNotFound{}
}

/*
GetTeamVersionsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type GetTeamVersionsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this get team versions not found response has a 2xx status code
func (o *GetTeamVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get team versions not found response has a 3xx status code
func (o *GetTeamVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team versions not found response has a 4xx status code
func (o *GetTeamVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get team versions not found response has a 5xx status code
func (o *GetTeamVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get team versions not found response a status code equal to that given
func (o *GetTeamVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get team versions not found response
func (o *GetTeamVersionsNotFound) Code() int {
	return 404
}

func (o *GetTeamVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamVersionsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] getTeamVersionsNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamVersionsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetTeamVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamVersionsDefault creates a GetTeamVersionsDefault with default headers values
func NewGetTeamVersionsDefault(code int) *GetTeamVersionsDefault {
	return &GetTeamVersionsDefault{
		_statusCode: code,
	}
}

/*
GetTeamVersionsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetTeamVersionsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this get team versions default response has a 2xx status code
func (o *GetTeamVersionsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get team versions default response has a 3xx status code
func (o *GetTeamVersionsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get team versions default response has a 4xx status code
func (o *GetTeamVersionsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get team versions default response has a 5xx status code
func (o *GetTeamVersionsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get team versions default response a status code equal to that given
func (o *GetTeamVersionsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get team versions default response
func (o *GetTeamVersionsDefault) Code() int {
	return o._statusCode
}

func (o *GetTeamVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] GetTeamVersions default  %+v", o._statusCode, o.Payload)
}

func (o *GetTeamVersionsDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{entity}/versions/{kind}][%d] GetTeamVersions default  %+v", o._statusCode, o.Payload)
}

func (o *GetTeamVersionsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetTeamVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
