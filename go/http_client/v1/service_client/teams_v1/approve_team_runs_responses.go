// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/go/http_client/v1/service_model"
)

// ApproveTeamRunsReader is a Reader for the ApproveTeamRuns structure.
type ApproveTeamRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveTeamRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApproveTeamRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewApproveTeamRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewApproveTeamRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApproveTeamRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewApproveTeamRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewApproveTeamRunsOK creates a ApproveTeamRunsOK with default headers values
func NewApproveTeamRunsOK() *ApproveTeamRunsOK {
	return &ApproveTeamRunsOK{}
}

/*
ApproveTeamRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ApproveTeamRunsOK struct {
}

// IsSuccess returns true when this approve team runs o k response has a 2xx status code
func (o *ApproveTeamRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve team runs o k response has a 3xx status code
func (o *ApproveTeamRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve team runs o k response has a 4xx status code
func (o *ApproveTeamRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve team runs o k response has a 5xx status code
func (o *ApproveTeamRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve team runs o k response a status code equal to that given
func (o *ApproveTeamRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve team runs o k response
func (o *ApproveTeamRunsOK) Code() int {
	return 200
}

func (o *ApproveTeamRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsOK ", 200)
}

func (o *ApproveTeamRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsOK ", 200)
}

func (o *ApproveTeamRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApproveTeamRunsNoContent creates a ApproveTeamRunsNoContent with default headers values
func NewApproveTeamRunsNoContent() *ApproveTeamRunsNoContent {
	return &ApproveTeamRunsNoContent{}
}

/*
ApproveTeamRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type ApproveTeamRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this approve team runs no content response has a 2xx status code
func (o *ApproveTeamRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve team runs no content response has a 3xx status code
func (o *ApproveTeamRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve team runs no content response has a 4xx status code
func (o *ApproveTeamRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve team runs no content response has a 5xx status code
func (o *ApproveTeamRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this approve team runs no content response a status code equal to that given
func (o *ApproveTeamRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the approve team runs no content response
func (o *ApproveTeamRunsNoContent) Code() int {
	return 204
}

func (o *ApproveTeamRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *ApproveTeamRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *ApproveTeamRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveTeamRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveTeamRunsForbidden creates a ApproveTeamRunsForbidden with default headers values
func NewApproveTeamRunsForbidden() *ApproveTeamRunsForbidden {
	return &ApproveTeamRunsForbidden{}
}

/*
ApproveTeamRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type ApproveTeamRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this approve team runs forbidden response has a 2xx status code
func (o *ApproveTeamRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve team runs forbidden response has a 3xx status code
func (o *ApproveTeamRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve team runs forbidden response has a 4xx status code
func (o *ApproveTeamRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve team runs forbidden response has a 5xx status code
func (o *ApproveTeamRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this approve team runs forbidden response a status code equal to that given
func (o *ApproveTeamRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the approve team runs forbidden response
func (o *ApproveTeamRunsForbidden) Code() int {
	return 403
}

func (o *ApproveTeamRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *ApproveTeamRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *ApproveTeamRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveTeamRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveTeamRunsNotFound creates a ApproveTeamRunsNotFound with default headers values
func NewApproveTeamRunsNotFound() *ApproveTeamRunsNotFound {
	return &ApproveTeamRunsNotFound{}
}

/*
ApproveTeamRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type ApproveTeamRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this approve team runs not found response has a 2xx status code
func (o *ApproveTeamRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve team runs not found response has a 3xx status code
func (o *ApproveTeamRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve team runs not found response has a 4xx status code
func (o *ApproveTeamRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve team runs not found response has a 5xx status code
func (o *ApproveTeamRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this approve team runs not found response a status code equal to that given
func (o *ApproveTeamRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the approve team runs not found response
func (o *ApproveTeamRunsNotFound) Code() int {
	return 404
}

func (o *ApproveTeamRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *ApproveTeamRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] approveTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *ApproveTeamRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ApproveTeamRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveTeamRunsDefault creates a ApproveTeamRunsDefault with default headers values
func NewApproveTeamRunsDefault(code int) *ApproveTeamRunsDefault {
	return &ApproveTeamRunsDefault{
		_statusCode: code,
	}
}

/*
ApproveTeamRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ApproveTeamRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this approve team runs default response has a 2xx status code
func (o *ApproveTeamRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this approve team runs default response has a 3xx status code
func (o *ApproveTeamRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this approve team runs default response has a 4xx status code
func (o *ApproveTeamRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this approve team runs default response has a 5xx status code
func (o *ApproveTeamRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this approve team runs default response a status code equal to that given
func (o *ApproveTeamRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the approve team runs default response
func (o *ApproveTeamRunsDefault) Code() int {
	return o._statusCode
}

func (o *ApproveTeamRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] ApproveTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *ApproveTeamRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/approve][%d] ApproveTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *ApproveTeamRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ApproveTeamRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
