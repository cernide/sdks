// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// InvalidateTeamRunsReader is a Reader for the InvalidateTeamRuns structure.
type InvalidateTeamRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InvalidateTeamRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInvalidateTeamRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewInvalidateTeamRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewInvalidateTeamRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInvalidateTeamRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewInvalidateTeamRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewInvalidateTeamRunsOK creates a InvalidateTeamRunsOK with default headers values
func NewInvalidateTeamRunsOK() *InvalidateTeamRunsOK {
	return &InvalidateTeamRunsOK{}
}

/*
InvalidateTeamRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type InvalidateTeamRunsOK struct {
}

// IsSuccess returns true when this invalidate team runs o k response has a 2xx status code
func (o *InvalidateTeamRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invalidate team runs o k response has a 3xx status code
func (o *InvalidateTeamRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate team runs o k response has a 4xx status code
func (o *InvalidateTeamRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this invalidate team runs o k response has a 5xx status code
func (o *InvalidateTeamRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate team runs o k response a status code equal to that given
func (o *InvalidateTeamRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the invalidate team runs o k response
func (o *InvalidateTeamRunsOK) Code() int {
	return 200
}

func (o *InvalidateTeamRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsOK ", 200)
}

func (o *InvalidateTeamRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsOK ", 200)
}

func (o *InvalidateTeamRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInvalidateTeamRunsNoContent creates a InvalidateTeamRunsNoContent with default headers values
func NewInvalidateTeamRunsNoContent() *InvalidateTeamRunsNoContent {
	return &InvalidateTeamRunsNoContent{}
}

/*
InvalidateTeamRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type InvalidateTeamRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate team runs no content response has a 2xx status code
func (o *InvalidateTeamRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invalidate team runs no content response has a 3xx status code
func (o *InvalidateTeamRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate team runs no content response has a 4xx status code
func (o *InvalidateTeamRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this invalidate team runs no content response has a 5xx status code
func (o *InvalidateTeamRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate team runs no content response a status code equal to that given
func (o *InvalidateTeamRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the invalidate team runs no content response
func (o *InvalidateTeamRunsNoContent) Code() int {
	return 204
}

func (o *InvalidateTeamRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *InvalidateTeamRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *InvalidateTeamRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateTeamRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateTeamRunsForbidden creates a InvalidateTeamRunsForbidden with default headers values
func NewInvalidateTeamRunsForbidden() *InvalidateTeamRunsForbidden {
	return &InvalidateTeamRunsForbidden{}
}

/*
InvalidateTeamRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type InvalidateTeamRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate team runs forbidden response has a 2xx status code
func (o *InvalidateTeamRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invalidate team runs forbidden response has a 3xx status code
func (o *InvalidateTeamRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate team runs forbidden response has a 4xx status code
func (o *InvalidateTeamRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this invalidate team runs forbidden response has a 5xx status code
func (o *InvalidateTeamRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate team runs forbidden response a status code equal to that given
func (o *InvalidateTeamRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the invalidate team runs forbidden response
func (o *InvalidateTeamRunsForbidden) Code() int {
	return 403
}

func (o *InvalidateTeamRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *InvalidateTeamRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *InvalidateTeamRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateTeamRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateTeamRunsNotFound creates a InvalidateTeamRunsNotFound with default headers values
func NewInvalidateTeamRunsNotFound() *InvalidateTeamRunsNotFound {
	return &InvalidateTeamRunsNotFound{}
}

/*
InvalidateTeamRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type InvalidateTeamRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this invalidate team runs not found response has a 2xx status code
func (o *InvalidateTeamRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invalidate team runs not found response has a 3xx status code
func (o *InvalidateTeamRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invalidate team runs not found response has a 4xx status code
func (o *InvalidateTeamRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this invalidate team runs not found response has a 5xx status code
func (o *InvalidateTeamRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this invalidate team runs not found response a status code equal to that given
func (o *InvalidateTeamRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the invalidate team runs not found response
func (o *InvalidateTeamRunsNotFound) Code() int {
	return 404
}

func (o *InvalidateTeamRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *InvalidateTeamRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] invalidateTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *InvalidateTeamRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *InvalidateTeamRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateTeamRunsDefault creates a InvalidateTeamRunsDefault with default headers values
func NewInvalidateTeamRunsDefault(code int) *InvalidateTeamRunsDefault {
	return &InvalidateTeamRunsDefault{
		_statusCode: code,
	}
}

/*
InvalidateTeamRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type InvalidateTeamRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this invalidate team runs default response has a 2xx status code
func (o *InvalidateTeamRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this invalidate team runs default response has a 3xx status code
func (o *InvalidateTeamRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this invalidate team runs default response has a 4xx status code
func (o *InvalidateTeamRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this invalidate team runs default response has a 5xx status code
func (o *InvalidateTeamRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this invalidate team runs default response a status code equal to that given
func (o *InvalidateTeamRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the invalidate team runs default response
func (o *InvalidateTeamRunsDefault) Code() int {
	return o._statusCode
}

func (o *InvalidateTeamRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] InvalidateTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *InvalidateTeamRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/invalidate][%d] InvalidateTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *InvalidateTeamRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *InvalidateTeamRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
