// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teams v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApproveTeamRuns(params *ApproveTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveTeamRunsOK, *ApproveTeamRunsNoContent, error)

	ArchiveTeamRuns(params *ArchiveTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ArchiveTeamRunsOK, *ArchiveTeamRunsNoContent, error)

	BookmarkTeamRuns(params *BookmarkTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BookmarkTeamRunsOK, *BookmarkTeamRunsNoContent, error)

	CreateTeam(params *CreateTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamOK, *CreateTeamNoContent, error)

	CreateTeamMember(params *CreateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamMemberOK, *CreateTeamMemberNoContent, error)

	DeleteTeam(params *DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamOK, *DeleteTeamNoContent, error)

	DeleteTeamMember(params *DeleteTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamMemberOK, *DeleteTeamMemberNoContent, error)

	DeleteTeamRuns(params *DeleteTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamRunsOK, *DeleteTeamRunsNoContent, error)

	GetTeam(params *GetTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamOK, *GetTeamNoContent, error)

	GetTeamActivities(params *GetTeamActivitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamActivitiesOK, *GetTeamActivitiesNoContent, error)

	GetTeamMember(params *GetTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMemberOK, *GetTeamMemberNoContent, error)

	GetTeamMultiRunEvents(params *GetTeamMultiRunEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMultiRunEventsOK, *GetTeamMultiRunEventsNoContent, error)

	GetTeamMultiRunImportance(params *GetTeamMultiRunImportanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMultiRunImportanceOK, *GetTeamMultiRunImportanceNoContent, error)

	GetTeamRun(params *GetTeamRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunOK, *GetTeamRunNoContent, error)

	GetTeamRuns(params *GetTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunsOK, *GetTeamRunsNoContent, error)

	GetTeamRunsArtifactsLineage(params *GetTeamRunsArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunsArtifactsLineageOK, *GetTeamRunsArtifactsLineageNoContent, error)

	GetTeamStats(params *GetTeamStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamStatsOK, *GetTeamStatsNoContent, error)

	GetTeamVersions(params *GetTeamVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamVersionsOK, *GetTeamVersionsNoContent, error)

	InvalidateTeamRuns(params *InvalidateTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvalidateTeamRunsOK, *InvalidateTeamRunsNoContent, error)

	ListTeamMembers(params *ListTeamMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamMembersOK, *ListTeamMembersNoContent, error)

	ListTeamNames(params *ListTeamNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamNamesOK, *ListTeamNamesNoContent, error)

	ListTeams(params *ListTeamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamsOK, *ListTeamsNoContent, error)

	PatchTeam(params *PatchTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTeamOK, *PatchTeamNoContent, error)

	PatchTeamMember(params *PatchTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTeamMemberOK, *PatchTeamMemberNoContent, error)

	RestoreTeamRuns(params *RestoreTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreTeamRunsOK, *RestoreTeamRunsNoContent, error)

	SkipTeamRuns(params *SkipTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SkipTeamRunsOK, *SkipTeamRunsNoContent, error)

	StopTeamRuns(params *StopTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopTeamRunsOK, *StopTeamRunsNoContent, error)

	TagTeamRuns(params *TagTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TagTeamRunsOK, *TagTeamRunsNoContent, error)

	TransferTeamRuns(params *TransferTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferTeamRunsOK, *TransferTeamRunsNoContent, error)

	UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamOK, *UpdateTeamNoContent, error)

	UpdateTeamMember(params *UpdateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamMemberOK, *UpdateTeamMemberNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ApproveTeamRuns approves cross project runs selection
*/
func (a *Client) ApproveTeamRuns(params *ApproveTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveTeamRunsOK, *ApproveTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApproveTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApproveTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ApproveTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApproveTeamRunsOK:
		return value, nil, nil
	case *ApproveTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApproveTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveTeamRuns archives cross project runs selection
*/
func (a *Client) ArchiveTeamRuns(params *ArchiveTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ArchiveTeamRunsOK, *ArchiveTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ArchiveTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ArchiveTeamRunsOK:
		return value, nil, nil
	case *ArchiveTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookmarkTeamRuns bookmarks cross project runs selection
*/
func (a *Client) BookmarkTeamRuns(params *BookmarkTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BookmarkTeamRunsOK, *BookmarkTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookmarkTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookmarkTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BookmarkTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BookmarkTeamRunsOK:
		return value, nil, nil
	case *BookmarkTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookmarkTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTeam creates team
*/
func (a *Client) CreateTeam(params *CreateTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamOK, *CreateTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTeam",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTeamOK:
		return value, nil, nil
	case *CreateTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTeamMember creates team member
*/
func (a *Client) CreateTeamMember(params *CreateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamMemberOK, *CreateTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTeamMember",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTeamMemberOK:
		return value, nil, nil
	case *CreateTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTeam deletes team
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamOK, *DeleteTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTeamOK:
		return value, nil, nil
	case *DeleteTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTeamMember deletes team member details
*/
func (a *Client) DeleteTeamMember(params *DeleteTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamMemberOK, *DeleteTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeamMember",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTeamMemberOK:
		return value, nil, nil
	case *DeleteTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTeamRuns deletes cross project runs selection
*/
func (a *Client) DeleteTeamRuns(params *DeleteTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamRunsOK, *DeleteTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeamRuns",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTeamRunsOK:
		return value, nil, nil
	case *DeleteTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeam gets team
*/
func (a *Client) GetTeam(params *GetTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamOK, *GetTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeam",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamOK:
		return value, nil, nil
	case *GetTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamActivities gets organization activities
*/
func (a *Client) GetTeamActivities(params *GetTeamActivitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamActivitiesOK, *GetTeamActivitiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamActivitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamActivities",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamActivitiesOK:
		return value, nil, nil
	case *GetTeamActivitiesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamActivitiesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamMember gets team member details
*/
func (a *Client) GetTeamMember(params *GetTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMemberOK, *GetTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamMember",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamMemberOK:
		return value, nil, nil
	case *GetTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamMultiRunEvents gets multi runs events
*/
func (a *Client) GetTeamMultiRunEvents(params *GetTeamMultiRunEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMultiRunEventsOK, *GetTeamMultiRunEventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamMultiRunEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamMultiRunEvents",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/orgs/{owner}/teams/{entity}/runs/multi/events/{kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamMultiRunEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamMultiRunEventsOK:
		return value, nil, nil
	case *GetTeamMultiRunEventsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamMultiRunEventsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamMultiRunImportance gets multi run importance
*/
func (a *Client) GetTeamMultiRunImportance(params *GetTeamMultiRunImportanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamMultiRunImportanceOK, *GetTeamMultiRunImportanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamMultiRunImportanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamMultiRunImportance",
		Method:             "POST",
		PathPattern:        "/streams/v1/{namespace}/orgs/{owner}/teams/{entity}/runs/multi/importance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamMultiRunImportanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamMultiRunImportanceOK:
		return value, nil, nil
	case *GetTeamMultiRunImportanceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamMultiRunImportanceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamRun gets a run in a team
*/
func (a *Client) GetTeamRun(params *GetTeamRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunOK, *GetTeamRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamRun",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{entity}/runs/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamRunOK:
		return value, nil, nil
	case *GetTeamRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamRuns gets all runs in a team
*/
func (a *Client) GetTeamRuns(params *GetTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunsOK, *GetTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamRuns",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamRunsOK:
		return value, nil, nil
	case *GetTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamRunsArtifactsLineage gets runs artifacts lineage
*/
func (a *Client) GetTeamRunsArtifactsLineage(params *GetTeamRunsArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamRunsArtifactsLineageOK, *GetTeamRunsArtifactsLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamRunsArtifactsLineageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamRunsArtifactsLineage",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/lineage/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamRunsArtifactsLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamRunsArtifactsLineageOK:
		return value, nil, nil
	case *GetTeamRunsArtifactsLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamRunsArtifactsLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamStats gets team stats
*/
func (a *Client) GetTeamStats(params *GetTeamStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamStatsOK, *GetTeamStatsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamStats",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamStatsOK:
		return value, nil, nil
	case *GetTeamStatsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamStatsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTeamVersions gets all runs in a team
*/
func (a *Client) GetTeamVersions(params *GetTeamVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamVersionsOK, *GetTeamVersionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTeamVersions",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{entity}/versions/{kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeamVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTeamVersionsOK:
		return value, nil, nil
	case *GetTeamVersionsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTeamVersionsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InvalidateTeamRuns invalidates cross project runs selection
*/
func (a *Client) InvalidateTeamRuns(params *InvalidateTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvalidateTeamRunsOK, *InvalidateTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InvalidateTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/invalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InvalidateTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InvalidateTeamRunsOK:
		return value, nil, nil
	case *InvalidateTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InvalidateTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTeamMembers gets team members
*/
func (a *Client) ListTeamMembers(params *ListTeamMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamMembersOK, *ListTeamMembersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeamMembers",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListTeamMembersOK:
		return value, nil, nil
	case *ListTeamMembersNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamMembersDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTeamNames lists teams names
*/
func (a *Client) ListTeamNames(params *ListTeamNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamNamesOK, *ListTeamNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeamNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListTeamNamesOK:
		return value, nil, nil
	case *ListTeamNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTeams lists teams
*/
func (a *Client) ListTeams(params *ListTeamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamsOK, *ListTeamsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeams",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListTeamsOK:
		return value, nil, nil
	case *ListTeamsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTeam patches team
*/
func (a *Client) PatchTeam(params *PatchTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTeamOK, *PatchTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchTeam",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchTeamOK:
		return value, nil, nil
	case *PatchTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTeamMember patches team member
*/
func (a *Client) PatchTeamMember(params *PatchTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTeamMemberOK, *PatchTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTeamMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchTeamMember",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchTeamMemberOK:
		return value, nil, nil
	case *PatchTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestoreTeamRuns restores cross project runs selection
*/
func (a *Client) RestoreTeamRuns(params *RestoreTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreTeamRunsOK, *RestoreTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestoreTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestoreTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RestoreTeamRunsOK:
		return value, nil, nil
	case *RestoreTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestoreTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SkipTeamRuns skips cross project runs selection
*/
func (a *Client) SkipTeamRuns(params *SkipTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SkipTeamRunsOK, *SkipTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkipTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SkipTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/Skip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkipTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SkipTeamRunsOK:
		return value, nil, nil
	case *SkipTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SkipTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopTeamRuns stops cross project runs selection
*/
func (a *Client) StopTeamRuns(params *StopTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopTeamRunsOK, *StopTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StopTeamRunsOK:
		return value, nil, nil
	case *StopTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TagTeamRuns tags cross project runs selection
*/
func (a *Client) TagTeamRuns(params *TagTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TagTeamRunsOK, *TagTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TagTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TagTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TagTeamRunsOK:
		return value, nil, nil
	case *TagTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TagTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TransferTeamRuns transfers cross project runs selection to a new project
*/
func (a *Client) TransferTeamRuns(params *TransferTeamRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferTeamRunsOK, *TransferTeamRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferTeamRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TransferTeamRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{name}/runs/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferTeamRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TransferTeamRunsOK:
		return value, nil, nil
	case *TransferTeamRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TransferTeamRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTeam updates team
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamOK, *UpdateTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTeamOK:
		return value, nil, nil
	case *UpdateTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTeamMember updates team member
*/
func (a *Client) UpdateTeamMember(params *UpdateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamMemberOK, *UpdateTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTeamMember",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTeamMemberOK:
		return value, nil, nil
	case *UpdateTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
