// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// TagTeamRunsReader is a Reader for the TagTeamRuns structure.
type TagTeamRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TagTeamRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTagTeamRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewTagTeamRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewTagTeamRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTagTeamRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewTagTeamRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTagTeamRunsOK creates a TagTeamRunsOK with default headers values
func NewTagTeamRunsOK() *TagTeamRunsOK {
	return &TagTeamRunsOK{}
}

/*
TagTeamRunsOK describes a response with status code 200, with default header values.

A successful response.
*/
type TagTeamRunsOK struct {
}

// IsSuccess returns true when this tag team runs o k response has a 2xx status code
func (o *TagTeamRunsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tag team runs o k response has a 3xx status code
func (o *TagTeamRunsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag team runs o k response has a 4xx status code
func (o *TagTeamRunsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tag team runs o k response has a 5xx status code
func (o *TagTeamRunsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tag team runs o k response a status code equal to that given
func (o *TagTeamRunsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tag team runs o k response
func (o *TagTeamRunsOK) Code() int {
	return 200
}

func (o *TagTeamRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsOK ", 200)
}

func (o *TagTeamRunsOK) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsOK ", 200)
}

func (o *TagTeamRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTagTeamRunsNoContent creates a TagTeamRunsNoContent with default headers values
func NewTagTeamRunsNoContent() *TagTeamRunsNoContent {
	return &TagTeamRunsNoContent{}
}

/*
TagTeamRunsNoContent describes a response with status code 204, with default header values.

No content.
*/
type TagTeamRunsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this tag team runs no content response has a 2xx status code
func (o *TagTeamRunsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tag team runs no content response has a 3xx status code
func (o *TagTeamRunsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag team runs no content response has a 4xx status code
func (o *TagTeamRunsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this tag team runs no content response has a 5xx status code
func (o *TagTeamRunsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this tag team runs no content response a status code equal to that given
func (o *TagTeamRunsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the tag team runs no content response
func (o *TagTeamRunsNoContent) Code() int {
	return 204
}

func (o *TagTeamRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *TagTeamRunsNoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsNoContent  %+v", 204, o.Payload)
}

func (o *TagTeamRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *TagTeamRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagTeamRunsForbidden creates a TagTeamRunsForbidden with default headers values
func NewTagTeamRunsForbidden() *TagTeamRunsForbidden {
	return &TagTeamRunsForbidden{}
}

/*
TagTeamRunsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type TagTeamRunsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this tag team runs forbidden response has a 2xx status code
func (o *TagTeamRunsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tag team runs forbidden response has a 3xx status code
func (o *TagTeamRunsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag team runs forbidden response has a 4xx status code
func (o *TagTeamRunsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this tag team runs forbidden response has a 5xx status code
func (o *TagTeamRunsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this tag team runs forbidden response a status code equal to that given
func (o *TagTeamRunsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the tag team runs forbidden response
func (o *TagTeamRunsForbidden) Code() int {
	return 403
}

func (o *TagTeamRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *TagTeamRunsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsForbidden  %+v", 403, o.Payload)
}

func (o *TagTeamRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *TagTeamRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagTeamRunsNotFound creates a TagTeamRunsNotFound with default headers values
func NewTagTeamRunsNotFound() *TagTeamRunsNotFound {
	return &TagTeamRunsNotFound{}
}

/*
TagTeamRunsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type TagTeamRunsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this tag team runs not found response has a 2xx status code
func (o *TagTeamRunsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tag team runs not found response has a 3xx status code
func (o *TagTeamRunsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tag team runs not found response has a 4xx status code
func (o *TagTeamRunsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this tag team runs not found response has a 5xx status code
func (o *TagTeamRunsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this tag team runs not found response a status code equal to that given
func (o *TagTeamRunsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the tag team runs not found response
func (o *TagTeamRunsNotFound) Code() int {
	return 404
}

func (o *TagTeamRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *TagTeamRunsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] tagTeamRunsNotFound  %+v", 404, o.Payload)
}

func (o *TagTeamRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *TagTeamRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagTeamRunsDefault creates a TagTeamRunsDefault with default headers values
func NewTagTeamRunsDefault(code int) *TagTeamRunsDefault {
	return &TagTeamRunsDefault{
		_statusCode: code,
	}
}

/*
TagTeamRunsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TagTeamRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this tag team runs default response has a 2xx status code
func (o *TagTeamRunsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this tag team runs default response has a 3xx status code
func (o *TagTeamRunsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this tag team runs default response has a 4xx status code
func (o *TagTeamRunsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this tag team runs default response has a 5xx status code
func (o *TagTeamRunsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this tag team runs default response a status code equal to that given
func (o *TagTeamRunsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the tag team runs default response
func (o *TagTeamRunsDefault) Code() int {
	return o._statusCode
}

func (o *TagTeamRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] TagTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *TagTeamRunsDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/orgs/{owner}/teams/{name}/runs/tag][%d] TagTeamRuns default  %+v", o._statusCode, o.Payload)
}

func (o *TagTeamRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *TagTeamRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
