// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// ListTeamMembersReader is a Reader for the ListTeamMembers structure.
type ListTeamMembersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTeamMembersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTeamMembersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewListTeamMembersNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListTeamMembersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListTeamMembersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListTeamMembersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTeamMembersOK creates a ListTeamMembersOK with default headers values
func NewListTeamMembersOK() *ListTeamMembersOK {
	return &ListTeamMembersOK{}
}

/* ListTeamMembersOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListTeamMembersOK struct {
	Payload *service_model.V1ListTeamMembersResponse
}

// IsSuccess returns true when this list team members o k response has a 2xx status code
func (o *ListTeamMembersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list team members o k response has a 3xx status code
func (o *ListTeamMembersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list team members o k response has a 4xx status code
func (o *ListTeamMembersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list team members o k response has a 5xx status code
func (o *ListTeamMembersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list team members o k response a status code equal to that given
func (o *ListTeamMembersOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListTeamMembersOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersOK  %+v", 200, o.Payload)
}

func (o *ListTeamMembersOK) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersOK  %+v", 200, o.Payload)
}

func (o *ListTeamMembersOK) GetPayload() *service_model.V1ListTeamMembersResponse {
	return o.Payload
}

func (o *ListTeamMembersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListTeamMembersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTeamMembersNoContent creates a ListTeamMembersNoContent with default headers values
func NewListTeamMembersNoContent() *ListTeamMembersNoContent {
	return &ListTeamMembersNoContent{}
}

/* ListTeamMembersNoContent describes a response with status code 204, with default header values.

No content.
*/
type ListTeamMembersNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this list team members no content response has a 2xx status code
func (o *ListTeamMembersNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list team members no content response has a 3xx status code
func (o *ListTeamMembersNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list team members no content response has a 4xx status code
func (o *ListTeamMembersNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this list team members no content response has a 5xx status code
func (o *ListTeamMembersNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this list team members no content response a status code equal to that given
func (o *ListTeamMembersNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ListTeamMembersNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersNoContent  %+v", 204, o.Payload)
}

func (o *ListTeamMembersNoContent) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersNoContent  %+v", 204, o.Payload)
}

func (o *ListTeamMembersNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ListTeamMembersNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTeamMembersForbidden creates a ListTeamMembersForbidden with default headers values
func NewListTeamMembersForbidden() *ListTeamMembersForbidden {
	return &ListTeamMembersForbidden{}
}

/* ListTeamMembersForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type ListTeamMembersForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this list team members forbidden response has a 2xx status code
func (o *ListTeamMembersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list team members forbidden response has a 3xx status code
func (o *ListTeamMembersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list team members forbidden response has a 4xx status code
func (o *ListTeamMembersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list team members forbidden response has a 5xx status code
func (o *ListTeamMembersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list team members forbidden response a status code equal to that given
func (o *ListTeamMembersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListTeamMembersForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersForbidden  %+v", 403, o.Payload)
}

func (o *ListTeamMembersForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersForbidden  %+v", 403, o.Payload)
}

func (o *ListTeamMembersForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ListTeamMembersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTeamMembersNotFound creates a ListTeamMembersNotFound with default headers values
func NewListTeamMembersNotFound() *ListTeamMembersNotFound {
	return &ListTeamMembersNotFound{}
}

/* ListTeamMembersNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type ListTeamMembersNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this list team members not found response has a 2xx status code
func (o *ListTeamMembersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list team members not found response has a 3xx status code
func (o *ListTeamMembersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list team members not found response has a 4xx status code
func (o *ListTeamMembersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list team members not found response has a 5xx status code
func (o *ListTeamMembersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list team members not found response a status code equal to that given
func (o *ListTeamMembersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListTeamMembersNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersNotFound  %+v", 404, o.Payload)
}

func (o *ListTeamMembersNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] listTeamMembersNotFound  %+v", 404, o.Payload)
}

func (o *ListTeamMembersNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ListTeamMembersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTeamMembersDefault creates a ListTeamMembersDefault with default headers values
func NewListTeamMembersDefault(code int) *ListTeamMembersDefault {
	return &ListTeamMembersDefault{
		_statusCode: code,
	}
}

/* ListTeamMembersDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListTeamMembersDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the list team members default response
func (o *ListTeamMembersDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this list team members default response has a 2xx status code
func (o *ListTeamMembersDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list team members default response has a 3xx status code
func (o *ListTeamMembersDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list team members default response has a 4xx status code
func (o *ListTeamMembersDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list team members default response has a 5xx status code
func (o *ListTeamMembersDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list team members default response a status code equal to that given
func (o *ListTeamMembersDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ListTeamMembersDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] ListTeamMembers default  %+v", o._statusCode, o.Payload)
}

func (o *ListTeamMembersDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/teams/{name}/members][%d] ListTeamMembers default  %+v", o._statusCode, o.Payload)
}

func (o *ListTeamMembersDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ListTeamMembersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
