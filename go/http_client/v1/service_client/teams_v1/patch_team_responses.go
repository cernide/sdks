// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchTeamReader is a Reader for the PatchTeam structure.
type PatchTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchTeamNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchTeamOK creates a PatchTeamOK with default headers values
func NewPatchTeamOK() *PatchTeamOK {
	return &PatchTeamOK{}
}

/* PatchTeamOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchTeamOK struct {
	Payload *service_model.V1Team
}

func (o *PatchTeamOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/teams/{team.name}][%d] patchTeamOK  %+v", 200, o.Payload)
}
func (o *PatchTeamOK) GetPayload() *service_model.V1Team {
	return o.Payload
}

func (o *PatchTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTeamNoContent creates a PatchTeamNoContent with default headers values
func NewPatchTeamNoContent() *PatchTeamNoContent {
	return &PatchTeamNoContent{}
}

/* PatchTeamNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchTeamNoContent struct {
	Payload interface{}
}

func (o *PatchTeamNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/teams/{team.name}][%d] patchTeamNoContent  %+v", 204, o.Payload)
}
func (o *PatchTeamNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTeamNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTeamForbidden creates a PatchTeamForbidden with default headers values
func NewPatchTeamForbidden() *PatchTeamForbidden {
	return &PatchTeamForbidden{}
}

/* PatchTeamForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchTeamForbidden struct {
	Payload interface{}
}

func (o *PatchTeamForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/teams/{team.name}][%d] patchTeamForbidden  %+v", 403, o.Payload)
}
func (o *PatchTeamForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTeamNotFound creates a PatchTeamNotFound with default headers values
func NewPatchTeamNotFound() *PatchTeamNotFound {
	return &PatchTeamNotFound{}
}

/* PatchTeamNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchTeamNotFound struct {
	Payload interface{}
}

func (o *PatchTeamNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/teams/{team.name}][%d] patchTeamNotFound  %+v", 404, o.Payload)
}
func (o *PatchTeamNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTeamDefault creates a PatchTeamDefault with default headers values
func NewPatchTeamDefault(code int) *PatchTeamDefault {
	return &PatchTeamDefault{
		_statusCode: code,
	}
}

/* PatchTeamDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchTeamDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch team default response
func (o *PatchTeamDefault) Code() int {
	return o._statusCode
}

func (o *PatchTeamDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/teams/{team.name}][%d] PatchTeam default  %+v", o._statusCode, o.Payload)
}
func (o *PatchTeamDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
