// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// DeleteVersionReader is a Reader for the DeleteVersion structure.
type DeleteVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteVersionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVersionOK creates a DeleteVersionOK with default headers values
func NewDeleteVersionOK() *DeleteVersionOK {
	return &DeleteVersionOK{}
}

/* DeleteVersionOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteVersionOK struct {
}

// IsSuccess returns true when this delete version o k response has a 2xx status code
func (o *DeleteVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete version o k response has a 3xx status code
func (o *DeleteVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version o k response has a 4xx status code
func (o *DeleteVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version o k response has a 5xx status code
func (o *DeleteVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version o k response a status code equal to that given
func (o *DeleteVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete version o k response
func (o *DeleteVersionOK) Code() int {
	return 200
}

func (o *DeleteVersionOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionOK ", 200)
}

func (o *DeleteVersionOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionOK ", 200)
}

func (o *DeleteVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVersionNoContent creates a DeleteVersionNoContent with default headers values
func NewDeleteVersionNoContent() *DeleteVersionNoContent {
	return &DeleteVersionNoContent{}
}

/* DeleteVersionNoContent describes a response with status code 204, with default header values.

No content.
*/
type DeleteVersionNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this delete version no content response has a 2xx status code
func (o *DeleteVersionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete version no content response has a 3xx status code
func (o *DeleteVersionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version no content response has a 4xx status code
func (o *DeleteVersionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete version no content response has a 5xx status code
func (o *DeleteVersionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version no content response a status code equal to that given
func (o *DeleteVersionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete version no content response
func (o *DeleteVersionNoContent) Code() int {
	return 204
}

func (o *DeleteVersionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionNoContent  %+v", 204, o.Payload)
}

func (o *DeleteVersionNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionNoContent  %+v", 204, o.Payload)
}

func (o *DeleteVersionNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteVersionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionForbidden creates a DeleteVersionForbidden with default headers values
func NewDeleteVersionForbidden() *DeleteVersionForbidden {
	return &DeleteVersionForbidden{}
}

/* DeleteVersionForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type DeleteVersionForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this delete version forbidden response has a 2xx status code
func (o *DeleteVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version forbidden response has a 3xx status code
func (o *DeleteVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version forbidden response has a 4xx status code
func (o *DeleteVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version forbidden response has a 5xx status code
func (o *DeleteVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version forbidden response a status code equal to that given
func (o *DeleteVersionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete version forbidden response
func (o *DeleteVersionForbidden) Code() int {
	return 403
}

func (o *DeleteVersionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVersionForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVersionForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionNotFound creates a DeleteVersionNotFound with default headers values
func NewDeleteVersionNotFound() *DeleteVersionNotFound {
	return &DeleteVersionNotFound{}
}

/* DeleteVersionNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type DeleteVersionNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this delete version not found response has a 2xx status code
func (o *DeleteVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete version not found response has a 3xx status code
func (o *DeleteVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete version not found response has a 4xx status code
func (o *DeleteVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete version not found response has a 5xx status code
func (o *DeleteVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete version not found response a status code equal to that given
func (o *DeleteVersionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete version not found response
func (o *DeleteVersionNotFound) Code() int {
	return 404
}

func (o *DeleteVersionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVersionNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] deleteVersionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVersionNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVersionDefault creates a DeleteVersionDefault with default headers values
func NewDeleteVersionDefault(code int) *DeleteVersionDefault {
	return &DeleteVersionDefault{
		_statusCode: code,
	}
}

/* DeleteVersionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type DeleteVersionDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this delete version default response has a 2xx status code
func (o *DeleteVersionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete version default response has a 3xx status code
func (o *DeleteVersionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete version default response has a 4xx status code
func (o *DeleteVersionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete version default response has a 5xx status code
func (o *DeleteVersionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete version default response a status code equal to that given
func (o *DeleteVersionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete version default response
func (o *DeleteVersionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVersionDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] DeleteVersion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVersionDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{entity}/versions/{kind}/{name}][%d] DeleteVersion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVersionDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *DeleteVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
