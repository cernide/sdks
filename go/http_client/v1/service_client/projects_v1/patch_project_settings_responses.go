// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchProjectSettingsReader is a Reader for the PatchProjectSettings structure.
type PatchProjectSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProjectSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchProjectSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchProjectSettingsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchProjectSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchProjectSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchProjectSettingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchProjectSettingsOK creates a PatchProjectSettingsOK with default headers values
func NewPatchProjectSettingsOK() *PatchProjectSettingsOK {
	return &PatchProjectSettingsOK{}
}

/*
PatchProjectSettingsOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchProjectSettingsOK struct {
	Payload *service_model.V1ProjectSettings
}

// IsSuccess returns true when this patch project settings o k response has a 2xx status code
func (o *PatchProjectSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch project settings o k response has a 3xx status code
func (o *PatchProjectSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project settings o k response has a 4xx status code
func (o *PatchProjectSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project settings o k response has a 5xx status code
func (o *PatchProjectSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project settings o k response a status code equal to that given
func (o *PatchProjectSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch project settings o k response
func (o *PatchProjectSettingsOK) Code() int {
	return 200
}

func (o *PatchProjectSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchProjectSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchProjectSettingsOK) GetPayload() *service_model.V1ProjectSettings {
	return o.Payload
}

func (o *PatchProjectSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ProjectSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectSettingsNoContent creates a PatchProjectSettingsNoContent with default headers values
func NewPatchProjectSettingsNoContent() *PatchProjectSettingsNoContent {
	return &PatchProjectSettingsNoContent{}
}

/*
PatchProjectSettingsNoContent describes a response with status code 204, with default header values.

No content.
*/
type PatchProjectSettingsNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project settings no content response has a 2xx status code
func (o *PatchProjectSettingsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch project settings no content response has a 3xx status code
func (o *PatchProjectSettingsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project settings no content response has a 4xx status code
func (o *PatchProjectSettingsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project settings no content response has a 5xx status code
func (o *PatchProjectSettingsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project settings no content response a status code equal to that given
func (o *PatchProjectSettingsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the patch project settings no content response
func (o *PatchProjectSettingsNoContent) Code() int {
	return 204
}

func (o *PatchProjectSettingsNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsNoContent  %+v", 204, o.Payload)
}

func (o *PatchProjectSettingsNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsNoContent  %+v", 204, o.Payload)
}

func (o *PatchProjectSettingsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectSettingsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectSettingsForbidden creates a PatchProjectSettingsForbidden with default headers values
func NewPatchProjectSettingsForbidden() *PatchProjectSettingsForbidden {
	return &PatchProjectSettingsForbidden{}
}

/*
PatchProjectSettingsForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type PatchProjectSettingsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project settings forbidden response has a 2xx status code
func (o *PatchProjectSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project settings forbidden response has a 3xx status code
func (o *PatchProjectSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project settings forbidden response has a 4xx status code
func (o *PatchProjectSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project settings forbidden response has a 5xx status code
func (o *PatchProjectSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project settings forbidden response a status code equal to that given
func (o *PatchProjectSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch project settings forbidden response
func (o *PatchProjectSettingsForbidden) Code() int {
	return 403
}

func (o *PatchProjectSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectSettingsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectSettingsNotFound creates a PatchProjectSettingsNotFound with default headers values
func NewPatchProjectSettingsNotFound() *PatchProjectSettingsNotFound {
	return &PatchProjectSettingsNotFound{}
}

/*
PatchProjectSettingsNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type PatchProjectSettingsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this patch project settings not found response has a 2xx status code
func (o *PatchProjectSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project settings not found response has a 3xx status code
func (o *PatchProjectSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project settings not found response has a 4xx status code
func (o *PatchProjectSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project settings not found response has a 5xx status code
func (o *PatchProjectSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project settings not found response a status code equal to that given
func (o *PatchProjectSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch project settings not found response
func (o *PatchProjectSettingsNotFound) Code() int {
	return 404
}

func (o *PatchProjectSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchProjectSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] patchProjectSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchProjectSettingsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchProjectSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectSettingsDefault creates a PatchProjectSettingsDefault with default headers values
func NewPatchProjectSettingsDefault(code int) *PatchProjectSettingsDefault {
	return &PatchProjectSettingsDefault{
		_statusCode: code,
	}
}

/*
PatchProjectSettingsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchProjectSettingsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this patch project settings default response has a 2xx status code
func (o *PatchProjectSettingsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch project settings default response has a 3xx status code
func (o *PatchProjectSettingsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch project settings default response has a 4xx status code
func (o *PatchProjectSettingsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch project settings default response has a 5xx status code
func (o *PatchProjectSettingsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch project settings default response a status code equal to that given
func (o *PatchProjectSettingsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch project settings default response
func (o *PatchProjectSettingsDefault) Code() int {
	return o._statusCode
}

func (o *PatchProjectSettingsDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] PatchProjectSettings default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProjectSettingsDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] PatchProjectSettings default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProjectSettingsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchProjectSettingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
