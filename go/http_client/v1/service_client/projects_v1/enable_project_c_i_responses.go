// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cernide/sdks/v2/go/http_client/v1/service_model"
)

// EnableProjectCIReader is a Reader for the EnableProjectCI structure.
type EnableProjectCIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableProjectCIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableProjectCIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewEnableProjectCINoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewEnableProjectCIForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableProjectCINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEnableProjectCIDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEnableProjectCIOK creates a EnableProjectCIOK with default headers values
func NewEnableProjectCIOK() *EnableProjectCIOK {
	return &EnableProjectCIOK{}
}

/*
EnableProjectCIOK describes a response with status code 200, with default header values.

A successful response.
*/
type EnableProjectCIOK struct {
}

// IsSuccess returns true when this enable project c i o k response has a 2xx status code
func (o *EnableProjectCIOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable project c i o k response has a 3xx status code
func (o *EnableProjectCIOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable project c i o k response has a 4xx status code
func (o *EnableProjectCIOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable project c i o k response has a 5xx status code
func (o *EnableProjectCIOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable project c i o k response a status code equal to that given
func (o *EnableProjectCIOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable project c i o k response
func (o *EnableProjectCIOK) Code() int {
	return 200
}

func (o *EnableProjectCIOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCIOK ", 200)
}

func (o *EnableProjectCIOK) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCIOK ", 200)
}

func (o *EnableProjectCIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableProjectCINoContent creates a EnableProjectCINoContent with default headers values
func NewEnableProjectCINoContent() *EnableProjectCINoContent {
	return &EnableProjectCINoContent{}
}

/*
EnableProjectCINoContent describes a response with status code 204, with default header values.

No content.
*/
type EnableProjectCINoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this enable project c i no content response has a 2xx status code
func (o *EnableProjectCINoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable project c i no content response has a 3xx status code
func (o *EnableProjectCINoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable project c i no content response has a 4xx status code
func (o *EnableProjectCINoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable project c i no content response has a 5xx status code
func (o *EnableProjectCINoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this enable project c i no content response a status code equal to that given
func (o *EnableProjectCINoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the enable project c i no content response
func (o *EnableProjectCINoContent) Code() int {
	return 204
}

func (o *EnableProjectCINoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCINoContent  %+v", 204, o.Payload)
}

func (o *EnableProjectCINoContent) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCINoContent  %+v", 204, o.Payload)
}

func (o *EnableProjectCINoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *EnableProjectCINoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableProjectCIForbidden creates a EnableProjectCIForbidden with default headers values
func NewEnableProjectCIForbidden() *EnableProjectCIForbidden {
	return &EnableProjectCIForbidden{}
}

/*
EnableProjectCIForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type EnableProjectCIForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this enable project c i forbidden response has a 2xx status code
func (o *EnableProjectCIForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable project c i forbidden response has a 3xx status code
func (o *EnableProjectCIForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable project c i forbidden response has a 4xx status code
func (o *EnableProjectCIForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable project c i forbidden response has a 5xx status code
func (o *EnableProjectCIForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable project c i forbidden response a status code equal to that given
func (o *EnableProjectCIForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable project c i forbidden response
func (o *EnableProjectCIForbidden) Code() int {
	return 403
}

func (o *EnableProjectCIForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCIForbidden  %+v", 403, o.Payload)
}

func (o *EnableProjectCIForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCIForbidden  %+v", 403, o.Payload)
}

func (o *EnableProjectCIForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *EnableProjectCIForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableProjectCINotFound creates a EnableProjectCINotFound with default headers values
func NewEnableProjectCINotFound() *EnableProjectCINotFound {
	return &EnableProjectCINotFound{}
}

/*
EnableProjectCINotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type EnableProjectCINotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this enable project c i not found response has a 2xx status code
func (o *EnableProjectCINotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable project c i not found response has a 3xx status code
func (o *EnableProjectCINotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable project c i not found response has a 4xx status code
func (o *EnableProjectCINotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable project c i not found response has a 5xx status code
func (o *EnableProjectCINotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable project c i not found response a status code equal to that given
func (o *EnableProjectCINotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable project c i not found response
func (o *EnableProjectCINotFound) Code() int {
	return 404
}

func (o *EnableProjectCINotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCINotFound  %+v", 404, o.Payload)
}

func (o *EnableProjectCINotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] enableProjectCINotFound  %+v", 404, o.Payload)
}

func (o *EnableProjectCINotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *EnableProjectCINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableProjectCIDefault creates a EnableProjectCIDefault with default headers values
func NewEnableProjectCIDefault(code int) *EnableProjectCIDefault {
	return &EnableProjectCIDefault{
		_statusCode: code,
	}
}

/*
EnableProjectCIDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EnableProjectCIDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this enable project c i default response has a 2xx status code
func (o *EnableProjectCIDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this enable project c i default response has a 3xx status code
func (o *EnableProjectCIDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this enable project c i default response has a 4xx status code
func (o *EnableProjectCIDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this enable project c i default response has a 5xx status code
func (o *EnableProjectCIDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this enable project c i default response a status code equal to that given
func (o *EnableProjectCIDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the enable project c i default response
func (o *EnableProjectCIDefault) Code() int {
	return o._statusCode
}

func (o *EnableProjectCIDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] EnableProjectCI default  %+v", o._statusCode, o.Payload)
}

func (o *EnableProjectCIDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{name}/ci][%d] EnableProjectCI default  %+v", o._statusCode, o.Payload)
}

func (o *EnableProjectCIDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *EnableProjectCIDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
