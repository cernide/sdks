// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package versions_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/sdks/go/http_client/v1/service_model"
)

// GetInstallationReader is a Reader for the GetInstallation structure.
type GetInstallationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstallationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstallationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetInstallationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetInstallationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstallationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetInstallationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetInstallationOK creates a GetInstallationOK with default headers values
func NewGetInstallationOK() *GetInstallationOK {
	return &GetInstallationOK{}
}

/*
GetInstallationOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetInstallationOK struct {
	Payload *service_model.V1Installation
}

// IsSuccess returns true when this get installation o k response has a 2xx status code
func (o *GetInstallationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get installation o k response has a 3xx status code
func (o *GetInstallationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get installation o k response has a 4xx status code
func (o *GetInstallationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get installation o k response has a 5xx status code
func (o *GetInstallationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get installation o k response a status code equal to that given
func (o *GetInstallationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get installation o k response
func (o *GetInstallationOK) Code() int {
	return 200
}

func (o *GetInstallationOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationOK  %+v", 200, o.Payload)
}

func (o *GetInstallationOK) String() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationOK  %+v", 200, o.Payload)
}

func (o *GetInstallationOK) GetPayload() *service_model.V1Installation {
	return o.Payload
}

func (o *GetInstallationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Installation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallationNoContent creates a GetInstallationNoContent with default headers values
func NewGetInstallationNoContent() *GetInstallationNoContent {
	return &GetInstallationNoContent{}
}

/*
GetInstallationNoContent describes a response with status code 204, with default header values.

No content.
*/
type GetInstallationNoContent struct {
	Payload interface{}
}

// IsSuccess returns true when this get installation no content response has a 2xx status code
func (o *GetInstallationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get installation no content response has a 3xx status code
func (o *GetInstallationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get installation no content response has a 4xx status code
func (o *GetInstallationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this get installation no content response has a 5xx status code
func (o *GetInstallationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this get installation no content response a status code equal to that given
func (o *GetInstallationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the get installation no content response
func (o *GetInstallationNoContent) Code() int {
	return 204
}

func (o *GetInstallationNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationNoContent  %+v", 204, o.Payload)
}

func (o *GetInstallationNoContent) String() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationNoContent  %+v", 204, o.Payload)
}

func (o *GetInstallationNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetInstallationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallationForbidden creates a GetInstallationForbidden with default headers values
func NewGetInstallationForbidden() *GetInstallationForbidden {
	return &GetInstallationForbidden{}
}

/*
GetInstallationForbidden describes a response with status code 403, with default header values.

You don't have permission to access the resource.
*/
type GetInstallationForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this get installation forbidden response has a 2xx status code
func (o *GetInstallationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get installation forbidden response has a 3xx status code
func (o *GetInstallationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get installation forbidden response has a 4xx status code
func (o *GetInstallationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get installation forbidden response has a 5xx status code
func (o *GetInstallationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get installation forbidden response a status code equal to that given
func (o *GetInstallationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get installation forbidden response
func (o *GetInstallationForbidden) Code() int {
	return 403
}

func (o *GetInstallationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationForbidden  %+v", 403, o.Payload)
}

func (o *GetInstallationForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationForbidden  %+v", 403, o.Payload)
}

func (o *GetInstallationForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetInstallationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallationNotFound creates a GetInstallationNotFound with default headers values
func NewGetInstallationNotFound() *GetInstallationNotFound {
	return &GetInstallationNotFound{}
}

/*
GetInstallationNotFound describes a response with status code 404, with default header values.

Resource does not exist.
*/
type GetInstallationNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this get installation not found response has a 2xx status code
func (o *GetInstallationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get installation not found response has a 3xx status code
func (o *GetInstallationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get installation not found response has a 4xx status code
func (o *GetInstallationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get installation not found response has a 5xx status code
func (o *GetInstallationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get installation not found response a status code equal to that given
func (o *GetInstallationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get installation not found response
func (o *GetInstallationNotFound) Code() int {
	return 404
}

func (o *GetInstallationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationNotFound  %+v", 404, o.Payload)
}

func (o *GetInstallationNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] getInstallationNotFound  %+v", 404, o.Payload)
}

func (o *GetInstallationNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetInstallationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallationDefault creates a GetInstallationDefault with default headers values
func NewGetInstallationDefault(code int) *GetInstallationDefault {
	return &GetInstallationDefault{
		_statusCode: code,
	}
}

/*
GetInstallationDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetInstallationDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// IsSuccess returns true when this get installation default response has a 2xx status code
func (o *GetInstallationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get installation default response has a 3xx status code
func (o *GetInstallationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get installation default response has a 4xx status code
func (o *GetInstallationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get installation default response has a 5xx status code
func (o *GetInstallationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get installation default response a status code equal to that given
func (o *GetInstallationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get installation default response
func (o *GetInstallationDefault) Code() int {
	return o._statusCode
}

func (o *GetInstallationDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] GetInstallation default  %+v", o._statusCode, o.Payload)
}

func (o *GetInstallationDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/installation][%d] GetInstallation default  %+v", o._statusCode, o.Payload)
}

func (o *GetInstallationDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetInstallationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
