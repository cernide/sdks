// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Hyperopt Matrix based on hyperopt
//
// swagger:model v1Hyperopt
type V1Hyperopt struct {

	// Algorithm to use from the hyperopt library
	Algorithm *V1HyperoptAlgorithms `json:"algorithm,omitempty"`

	// Number of concurrent runs
	Concurrency int32 `json:"concurrency,omitempty"`

	// A list of Early stopping objects, accepts both metric and failure early stopping mechanisms
	EarlyStopping []interface{} `json:"earlyStopping"`

	// Kind of matrix, should be equal to "hyperopt"
	Kind *string `json:"kind,omitempty"`

	// Maximum number of iteration to produce new observations
	MaxIterations int32 `json:"maxIterations,omitempty"`

	// Metric to optimize during the iterations
	Metric *V1OptimizationMetric `json:"metric,omitempty"`

	// Number of runs to generate and search
	NumRuns int32 `json:"numRuns,omitempty"`

	// Hyperparams/Space definition of params to traverse
	Params map[string]interface{} `json:"params,omitempty"`

	// Seed for the random generator
	Seed int32 `json:"seed,omitempty"`

	// Tuner reference (hubRef) to use
	Tuner *V1Tuner `json:"tuner,omitempty"`
}

// Validate validates this v1 hyperopt
func (m *V1Hyperopt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTuner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Hyperopt) validateAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if m.Algorithm != nil {
		if err := m.Algorithm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("algorithm")
			}
			return err
		}
	}

	return nil
}

func (m *V1Hyperopt) validateMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *V1Hyperopt) validateTuner(formats strfmt.Registry) error {
	if swag.IsZero(m.Tuner) { // not required
		return nil
	}

	if m.Tuner != nil {
		if err := m.Tuner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 hyperopt based on the context it is used
func (m *V1Hyperopt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTuner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Hyperopt) contextValidateAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if m.Algorithm != nil {
		if err := m.Algorithm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("algorithm")
			}
			return err
		}
	}

	return nil
}

func (m *V1Hyperopt) contextValidateMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.Metric != nil {
		if err := m.Metric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *V1Hyperopt) contextValidateTuner(ctx context.Context, formats strfmt.Registry) error {

	if m.Tuner != nil {
		if err := m.Tuner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Hyperopt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Hyperopt) UnmarshalBinary(b []byte) error {
	var res V1Hyperopt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
