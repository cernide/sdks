// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1RayReplica Ray replica definition
//
// swagger:model v1RayReplica
type V1RayReplica struct {

	// Optional connections section
	Connections []string `json:"connections"`

	// Optional container to run
	Container V1Container `json:"container,omitempty"`

	// Optional environment section
	Environment *V1Environment `json:"environment,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// Optional init connections section
	Init []*V1Init `json:"init"`

	// max replicas
	MaxReplicas int32 `json:"maxReplicas,omitempty"`

	// min replicas
	MinReplicas int32 `json:"minReplicas,omitempty"`

	// ray start params
	RayStartParams map[string]string `json:"rayStartParams,omitempty"`

	// Number of replicas
	Replicas int32 `json:"replicas,omitempty"`

	// Optional sidecars section
	Sidecars []V1Container `json:"sidecars"`

	// Volumes is a list of volumes that can be mounted.
	Volumes []V1Volume `json:"volumes"`
}

// Validate validates this v1 ray replica
func (m *V1RayReplica) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RayReplica) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *V1RayReplica) validateInit(formats strfmt.Registry) error {
	if swag.IsZero(m.Init) { // not required
		return nil
	}

	for i := 0; i < len(m.Init); i++ {
		if swag.IsZero(m.Init[i]) { // not required
			continue
		}

		if m.Init[i] != nil {
			if err := m.Init[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 ray replica based on the context it is used
func (m *V1RayReplica) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RayReplica) contextValidateEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.Environment != nil {
		if err := m.Environment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *V1RayReplica) contextValidateInit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Init); i++ {

		if m.Init[i] != nil {
			if err := m.Init[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1RayReplica) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RayReplica) UnmarshalBinary(b []byte) error {
	var res V1RayReplica
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
