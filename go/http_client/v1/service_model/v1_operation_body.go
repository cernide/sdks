// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1OperationBody Operation creation
//
// swagger:model v1OperationBody
type V1OperationBody struct {

	// The Operation body content as dump string
	Content string `json:"content,omitempty"`

	// Optional
	Description string `json:"description,omitempty"`

	// Optional, if the run is managed, true by default, this flag should be false if starting a non-managed run
	IsManaged bool `json:"is_managed,omitempty"`

	// Optional flag of the managing service
	ManagedBy *V1ManagedBy `json:"managed_by,omitempty"`

	// Meta
	MetaInfo interface{} `json:"meta_info,omitempty"`

	// Optional
	Name string `json:"name,omitempty"`

	// Optional, if the run is approved, true by default, this flag should be false if a run requires human validation
	Pending *V1RunPending `json:"pending,omitempty"`

	// Optional
	Tags []string `json:"tags"`
}

// Validate validates this v1 operation body
func (m *V1OperationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OperationBody) validateManagedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	if m.ManagedBy != nil {
		if err := m.ManagedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managed_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managed_by")
			}
			return err
		}
	}

	return nil
}

func (m *V1OperationBody) validatePending(formats strfmt.Registry) error {
	if swag.IsZero(m.Pending) { // not required
		return nil
	}

	if m.Pending != nil {
		if err := m.Pending.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pending")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 operation body based on the context it is used
func (m *V1OperationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OperationBody) contextValidateManagedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagedBy != nil {

		if swag.IsZero(m.ManagedBy) { // not required
			return nil
		}

		if err := m.ManagedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managed_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managed_by")
			}
			return err
		}
	}

	return nil
}

func (m *V1OperationBody) contextValidatePending(ctx context.Context, formats strfmt.Registry) error {

	if m.Pending != nil {

		if swag.IsZero(m.Pending) { // not required
			return nil
		}

		if err := m.Pending.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pending")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1OperationBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1OperationBody) UnmarshalBinary(b []byte) error {
	var res V1OperationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
