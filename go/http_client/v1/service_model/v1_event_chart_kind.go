// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1EventChartKind Chart kind
//
// - plotly: Plotly chart
//   - bokeh: Bokeh chart
//   - vega: Vega chart
//
// swagger:model v1EventChartKind
type V1EventChartKind string

func NewV1EventChartKind(value V1EventChartKind) *V1EventChartKind {
	v := value
	return &v
}

const (

	// V1EventChartKindPlotly captures enum value "plotly"
	V1EventChartKindPlotly V1EventChartKind = "plotly"

	// V1EventChartKindBokeh captures enum value "bokeh"
	V1EventChartKindBokeh V1EventChartKind = "bokeh"

	// V1EventChartKindVega captures enum value "vega"
	V1EventChartKindVega V1EventChartKind = "vega"
)

// for schema
var v1EventChartKindEnum []interface{}

func init() {
	var res []V1EventChartKind
	if err := json.Unmarshal([]byte(`["plotly","bokeh","vega"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EventChartKindEnum = append(v1EventChartKindEnum, v)
	}
}

func (m V1EventChartKind) validateV1EventChartKindEnum(path, location string, value V1EventChartKind) error {
	if err := validate.EnumCase(path, location, value, v1EventChartKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 event chart kind
func (m V1EventChartKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1EventChartKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 event chart kind based on context it is used
func (m V1EventChartKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
