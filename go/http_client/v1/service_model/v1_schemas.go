// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Schemas v1 schemas
//
// swagger:model v1Schemas
type V1Schemas struct {

	// artifacs
	Artifacs *V1ArtifactsType `json:"artifacs,omitempty"`

	// artifacts mount
	ArtifactsMount *V1ArtifactsMount `json:"artifactsMount,omitempty"`

	// auth
	Auth *V1AuthType `json:"auth,omitempty"`

	// compiled operation
	CompiledOperation *V1CompiledOperation `json:"compiledOperation,omitempty"`

	// connection
	Connection *V1ConnectionType `json:"connection,omitempty"`

	// connection schema
	ConnectionSchema *V1ConnectionSchema `json:"connectionSchema,omitempty"`

	// early stopping
	EarlyStopping *V1EarlyStopping `json:"earlyStopping,omitempty"`

	// event
	Event *V1Event `json:"event,omitempty"`

	// event type
	EventType *V1EventType `json:"eventType,omitempty"`

	// gcs
	Gcs *V1GcsType `json:"gcs,omitempty"`

	// hp params
	HpParams *V1HpParams `json:"hpParams,omitempty"`

	// k8s resource
	K8sResource *V1K8sResourceType `json:"k8sResource,omitempty"`

	// matrix
	Matrix *V1Matrix `json:"matrix,omitempty"`

	// matrix kind
	MatrixKind *V1MatrixKind `json:"matrixKind,omitempty"`

	// operation
	Operation *V1Operation `json:"operation,omitempty"`

	// polyaxon init container
	PolyaxonInitContainer *V1PolyaxonInitContainer `json:"polyaxonInitContainer,omitempty"`

	// polyaxon sidecar container
	PolyaxonSidecarContainer *V1PolyaxonSidecarContainer `json:"polyaxonSidecarContainer,omitempty"`

	// reference
	Reference *V1Reference `json:"reference,omitempty"`

	// run
	Run *V1RunSchema `json:"run,omitempty"`

	// s3
	S3 *V1S3Type `json:"s3,omitempty"`

	// schedule
	Schedule *V1Schedule `json:"schedule,omitempty"`

	// schedule kind
	ScheduleKind *V1ScheduleKind `json:"scheduleKind,omitempty"`

	// uri
	URI *V1URIType `json:"uri,omitempty"`

	// wasb
	Wasb *V1WasbType `json:"wasb,omitempty"`
}

// Validate validates this v1 schemas
func (m *V1Schemas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactsMount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompiledOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarlyStopping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHpParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatrix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatrixKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyaxonInitContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyaxonSidecarContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWasb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Schemas) validateArtifacs(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifacs) { // not required
		return nil
	}

	if m.Artifacs != nil {
		if err := m.Artifacs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateArtifactsMount(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactsMount) { // not required
		return nil
	}

	if m.ArtifactsMount != nil {
		if err := m.ArtifactsMount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactsMount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactsMount")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.Auth) { // not required
		return nil
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateCompiledOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.CompiledOperation) { // not required
		return nil
	}

	if m.CompiledOperation != nil {
		if err := m.CompiledOperation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compiledOperation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compiledOperation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateConnection(formats strfmt.Registry) error {
	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateConnectionSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionSchema) { // not required
		return nil
	}

	if m.ConnectionSchema != nil {
		if err := m.ConnectionSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionSchema")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateEarlyStopping(formats strfmt.Registry) error {
	if swag.IsZero(m.EarlyStopping) { // not required
		return nil
	}

	if m.EarlyStopping != nil {
		if err := m.EarlyStopping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("earlyStopping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("earlyStopping")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if m.EventType != nil {
		if err := m.EventType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventType")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateGcs(formats strfmt.Registry) error {
	if swag.IsZero(m.Gcs) { // not required
		return nil
	}

	if m.Gcs != nil {
		if err := m.Gcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateHpParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HpParams) { // not required
		return nil
	}

	if m.HpParams != nil {
		if err := m.HpParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hpParams")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateK8sResource(formats strfmt.Registry) error {
	if swag.IsZero(m.K8sResource) { // not required
		return nil
	}

	if m.K8sResource != nil {
		if err := m.K8sResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sResource")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateMatrix(formats strfmt.Registry) error {
	if swag.IsZero(m.Matrix) { // not required
		return nil
	}

	if m.Matrix != nil {
		if err := m.Matrix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateMatrixKind(formats strfmt.Registry) error {
	if swag.IsZero(m.MatrixKind) { // not required
		return nil
	}

	if m.MatrixKind != nil {
		if err := m.MatrixKind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrixKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrixKind")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validatePolyaxonInitContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.PolyaxonInitContainer) { // not required
		return nil
	}

	if m.PolyaxonInitContainer != nil {
		if err := m.PolyaxonInitContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyaxonInitContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyaxonInitContainer")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validatePolyaxonSidecarContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.PolyaxonSidecarContainer) { // not required
		return nil
	}

	if m.PolyaxonSidecarContainer != nil {
		if err := m.PolyaxonSidecarContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyaxonSidecarContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyaxonSidecarContainer")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateReference(formats strfmt.Registry) error {
	if swag.IsZero(m.Reference) { // not required
		return nil
	}

	if m.Reference != nil {
		if err := m.Reference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateRun(formats strfmt.Registry) error {
	if swag.IsZero(m.Run) { // not required
		return nil
	}

	if m.Run != nil {
		if err := m.Run.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("run")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateS3(formats strfmt.Registry) error {
	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateScheduleKind(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleKind) { // not required
		return nil
	}

	if m.ScheduleKind != nil {
		if err := m.ScheduleKind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleKind")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateURI(formats strfmt.Registry) error {
	if swag.IsZero(m.URI) { // not required
		return nil
	}

	if m.URI != nil {
		if err := m.URI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uri")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateWasb(formats strfmt.Registry) error {
	if swag.IsZero(m.Wasb) { // not required
		return nil
	}

	if m.Wasb != nil {
		if err := m.Wasb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wasb")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 schemas based on the context it is used
func (m *V1Schemas) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifacs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifactsMount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompiledOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectionSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEarlyStopping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHpParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateK8sResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatrix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatrixKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolyaxonInitContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolyaxonSidecarContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWasb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Schemas) contextValidateArtifacs(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifacs != nil {
		if err := m.Artifacs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateArtifactsMount(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactsMount != nil {
		if err := m.ArtifactsMount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactsMount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactsMount")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.Auth != nil {
		if err := m.Auth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateCompiledOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.CompiledOperation != nil {
		if err := m.CompiledOperation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compiledOperation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compiledOperation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {
		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateConnectionSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionSchema != nil {
		if err := m.ConnectionSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionSchema")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateEarlyStopping(ctx context.Context, formats strfmt.Registry) error {

	if m.EarlyStopping != nil {
		if err := m.EarlyStopping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("earlyStopping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("earlyStopping")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.Event != nil {
		if err := m.Event.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	if m.EventType != nil {
		if err := m.EventType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventType")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateGcs(ctx context.Context, formats strfmt.Registry) error {

	if m.Gcs != nil {
		if err := m.Gcs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateHpParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HpParams != nil {
		if err := m.HpParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hpParams")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateK8sResource(ctx context.Context, formats strfmt.Registry) error {

	if m.K8sResource != nil {
		if err := m.K8sResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sResource")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateMatrix(ctx context.Context, formats strfmt.Registry) error {

	if m.Matrix != nil {
		if err := m.Matrix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateMatrixKind(ctx context.Context, formats strfmt.Registry) error {

	if m.MatrixKind != nil {
		if err := m.MatrixKind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrixKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrixKind")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.Operation != nil {
		if err := m.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidatePolyaxonInitContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.PolyaxonInitContainer != nil {
		if err := m.PolyaxonInitContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyaxonInitContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyaxonInitContainer")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidatePolyaxonSidecarContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.PolyaxonSidecarContainer != nil {
		if err := m.PolyaxonSidecarContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyaxonSidecarContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyaxonSidecarContainer")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateReference(ctx context.Context, formats strfmt.Registry) error {

	if m.Reference != nil {
		if err := m.Reference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateRun(ctx context.Context, formats strfmt.Registry) error {

	if m.Run != nil {
		if err := m.Run.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("run")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateS3(ctx context.Context, formats strfmt.Registry) error {

	if m.S3 != nil {
		if err := m.S3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {
		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateScheduleKind(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleKind != nil {
		if err := m.ScheduleKind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleKind")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateURI(ctx context.Context, formats strfmt.Registry) error {

	if m.URI != nil {
		if err := m.URI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uri")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) contextValidateWasb(ctx context.Context, formats strfmt.Registry) error {

	if m.Wasb != nil {
		if err := m.Wasb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wasb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Schemas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Schemas) UnmarshalBinary(b []byte) error {
	var res V1Schemas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
