// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Matrix All Schemas message
//
// swagger:model v1Matrix
type V1Matrix struct {

	// bayes
	Bayes *V1Bayes `json:"bayes,omitempty"`

	// grid
	Grid *V1GridSearch `json:"grid,omitempty"`

	// hyperband
	Hyperband *V1Hyperband `json:"hyperband,omitempty"`

	// hyperopt
	Hyperopt *V1Hyperopt `json:"hyperopt,omitempty"`

	// iterative
	Iterative *V1Iterative `json:"iterative,omitempty"`

	// mapping
	Mapping *V1Mapping `json:"mapping,omitempty"`

	// random
	Random *V1RandomSearch `json:"random,omitempty"`
}

// Validate validates this v1 matrix
func (m *V1Matrix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBayes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperband(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperopt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIterative(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRandom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Matrix) validateBayes(formats strfmt.Registry) error {
	if swag.IsZero(m.Bayes) { // not required
		return nil
	}

	if m.Bayes != nil {
		if err := m.Bayes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bayes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bayes")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateGrid(formats strfmt.Registry) error {
	if swag.IsZero(m.Grid) { // not required
		return nil
	}

	if m.Grid != nil {
		if err := m.Grid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateHyperband(formats strfmt.Registry) error {
	if swag.IsZero(m.Hyperband) { // not required
		return nil
	}

	if m.Hyperband != nil {
		if err := m.Hyperband.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperband")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperband")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateHyperopt(formats strfmt.Registry) error {
	if swag.IsZero(m.Hyperopt) { // not required
		return nil
	}

	if m.Hyperopt != nil {
		if err := m.Hyperopt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperopt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperopt")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateIterative(formats strfmt.Registry) error {
	if swag.IsZero(m.Iterative) { // not required
		return nil
	}

	if m.Iterative != nil {
		if err := m.Iterative.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iterative")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iterative")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.Mapping) { // not required
		return nil
	}

	if m.Mapping != nil {
		if err := m.Mapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapping")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateRandom(formats strfmt.Registry) error {
	if swag.IsZero(m.Random) { // not required
		return nil
	}

	if m.Random != nil {
		if err := m.Random.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("random")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("random")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 matrix based on the context it is used
func (m *V1Matrix) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBayes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyperband(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyperopt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIterative(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRandom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Matrix) contextValidateBayes(ctx context.Context, formats strfmt.Registry) error {

	if m.Bayes != nil {

		if swag.IsZero(m.Bayes) { // not required
			return nil
		}

		if err := m.Bayes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bayes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bayes")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateGrid(ctx context.Context, formats strfmt.Registry) error {

	if m.Grid != nil {

		if swag.IsZero(m.Grid) { // not required
			return nil
		}

		if err := m.Grid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateHyperband(ctx context.Context, formats strfmt.Registry) error {

	if m.Hyperband != nil {

		if swag.IsZero(m.Hyperband) { // not required
			return nil
		}

		if err := m.Hyperband.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperband")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperband")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateHyperopt(ctx context.Context, formats strfmt.Registry) error {

	if m.Hyperopt != nil {

		if swag.IsZero(m.Hyperopt) { // not required
			return nil
		}

		if err := m.Hyperopt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperopt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperopt")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateIterative(ctx context.Context, formats strfmt.Registry) error {

	if m.Iterative != nil {

		if swag.IsZero(m.Iterative) { // not required
			return nil
		}

		if err := m.Iterative.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iterative")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iterative")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.Mapping != nil {

		if swag.IsZero(m.Mapping) { // not required
			return nil
		}

		if err := m.Mapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapping")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) contextValidateRandom(ctx context.Context, formats strfmt.Registry) error {

	if m.Random != nil {

		if swag.IsZero(m.Random) { // not required
			return nil
		}

		if err := m.Random.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("random")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("random")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Matrix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Matrix) UnmarshalBinary(b []byte) error {
	var res V1Matrix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
