// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MXJobMode - MXTrain: Train Mode, requires Server, Scheduler, Worker
//  - MXTune: Tune Mode, requires Tuner
//
// swagger:model MXJobMode
type MXJobMode string

func NewMXJobMode(value MXJobMode) *MXJobMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MXJobMode.
func (m MXJobMode) Pointer() *MXJobMode {
	return &m
}

const (

	// MXJobModeMXTrain captures enum value "MXTrain"
	MXJobModeMXTrain MXJobMode = "MXTrain"

	// MXJobModeMXTune captures enum value "MXTune"
	MXJobModeMXTune MXJobMode = "MXTune"
)

// for schema
var mXJobModeEnum []interface{}

func init() {
	var res []MXJobMode
	if err := json.Unmarshal([]byte(`["MXTrain","MXTune"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mXJobModeEnum = append(mXJobModeEnum, v)
	}
}

func (m MXJobMode) validateMXJobModeEnum(path, location string, value MXJobMode) error {
	if err := validate.EnumCase(path, location, value, mXJobModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this m x job mode
func (m MXJobMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMXJobModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this m x job mode based on context it is used
func (m MXJobMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
