// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Optimization Optimization enum for metrics
//
// - maximize: Minimize a metric
//   - minimize: Minimize a metric
//
// swagger:model v1Optimization
type V1Optimization string

func NewV1Optimization(value V1Optimization) *V1Optimization {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1Optimization.
func (m V1Optimization) Pointer() *V1Optimization {
	return &m
}

const (

	// V1OptimizationMaximize captures enum value "maximize"
	V1OptimizationMaximize V1Optimization = "maximize"

	// V1OptimizationMinimize captures enum value "minimize"
	V1OptimizationMinimize V1Optimization = "minimize"
)

// for schema
var v1OptimizationEnum []interface{}

func init() {
	var res []V1Optimization
	if err := json.Unmarshal([]byte(`["maximize","minimize"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1OptimizationEnum = append(v1OptimizationEnum, v)
	}
}

func (m V1Optimization) validateV1OptimizationEnum(path, location string, value V1Optimization) error {
	if err := validate.EnumCase(path, location, value, v1OptimizationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 optimization
func (m V1Optimization) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1OptimizationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 optimization based on context it is used
func (m V1Optimization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
