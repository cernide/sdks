// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PytorchElasticPolicy v1 pytorch elastic policy
//
// swagger:model v1PytorchElasticPolicy
type V1PytorchElasticPolicy struct {

	// Metrics contains the specifications which are used to calculate the
	// desired replica count (the maximum replica count across all metrics will
	// be used).  The desired replica count is calculated with multiplying the
	// ratio between the target value and the current value by the current
	// number of pods. Ergo, metrics used must decrease as the pod count is
	// increased, and vice-versa.  See the individual metric source types for
	// more information about how each type of metric must respond.
	// If not set, the HPA will not be created.
	Metrics []interface{} `json:"Metrics"`

	// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas, defaults to null.
	MaxReplicas int32 `json:"maxReplicas,omitempty"`

	// max restarts
	MaxRestarts int32 `json:"maxRestarts,omitempty"`

	// minReplicas is the lower limit for the number of replicas to which the training job can scale down.
	MinReplicas int32 `json:"minReplicas,omitempty"`

	// Number of workers per node; supported values: [auto, cpu, gpu, int].
	// Deprecated: This API is deprecated in v1.7+
	// Use .spec.nprocPerNode instead.
	NProcPerNode int32 `json:"nProcPerNode,omitempty"`

	// rdvz backend
	RdvzBackend string `json:"rdvzBackend,omitempty"`

	// RDZVConf contains additional rendezvous configuration (<key1>=<value1>,<key2>=<value2>,...).
	RdvzConf []interface{} `json:"rdvzConf"`

	// rdvz host
	RdvzHost string `json:"rdvzHost,omitempty"`

	// rdvz Id
	RdvzID string `json:"rdvzId,omitempty"`

	// rdvz port
	RdvzPort int32 `json:"rdvzPort,omitempty"`

	// Start a local standalone rendezvous backend that is represented by a C10d TCP store
	// on port 29400. Useful when launching single-node, multi-worker job. If specified
	// --rdzv_backend, --rdzv_endpoint, --rdzv_id are auto-assigned; any explicitly set values
	// are ignored.
	Standalone bool `json:"standalone,omitempty"`
}

// Validate validates this v1 pytorch elastic policy
func (m *V1PytorchElasticPolicy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 pytorch elastic policy based on context it is used
func (m *V1PytorchElasticPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PytorchElasticPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PytorchElasticPolicy) UnmarshalBinary(b []byte) error {
	var res V1PytorchElasticPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
