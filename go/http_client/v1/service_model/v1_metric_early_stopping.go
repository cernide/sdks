// Copyright 2018-2022 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MetricEarlyStopping MetricEarlyStoppingSchema specification
// Early stopping based on metric config.
//
// swagger:model v1MetricEarlyStopping
type V1MetricEarlyStopping struct {

	// Kind of this metric early stopping policy, should be equal to "metric_early_stopping"
	Kind *string `json:"kind,omitempty"`

	// Metric name to use for early stopping.
	Metric string `json:"metric,omitempty"`

	// Optimization to do: maximize or minimize.
	Optimization *V1Optimization `json:"optimization,omitempty"`

	// Policy to use, should be one of the stopping policies:
	// MedianStoppingPolicy, AverageStoppingPolicy, TruncationStoppingPolicy
	Policy interface{} `json:"policy,omitempty"`

	// Metric value to use for the condition.
	Value string `json:"value,omitempty"`
}

// Validate validates this v1 metric early stopping
func (m *V1MetricEarlyStopping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptimization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MetricEarlyStopping) validateOptimization(formats strfmt.Registry) error {
	if swag.IsZero(m.Optimization) { // not required
		return nil
	}

	if m.Optimization != nil {
		if err := m.Optimization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 metric early stopping based on the context it is used
func (m *V1MetricEarlyStopping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptimization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MetricEarlyStopping) contextValidateOptimization(ctx context.Context, formats strfmt.Registry) error {

	if m.Optimization != nil {
		if err := m.Optimization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MetricEarlyStopping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MetricEarlyStopping) UnmarshalBinary(b []byte) error {
	var res V1MetricEarlyStopping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
