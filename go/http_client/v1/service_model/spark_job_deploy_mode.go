// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SparkJobDeployMode spark job deploy mode
//
// swagger:model SparkJobDeployMode
type SparkJobDeployMode string

func NewSparkJobDeployMode(value SparkJobDeployMode) *SparkJobDeployMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SparkJobDeployMode.
func (m SparkJobDeployMode) Pointer() *SparkJobDeployMode {
	return &m
}

const (

	// SparkJobDeployModeCluster captures enum value "cluster"
	SparkJobDeployModeCluster SparkJobDeployMode = "cluster"

	// SparkJobDeployModeClient captures enum value "client"
	SparkJobDeployModeClient SparkJobDeployMode = "client"

	// SparkJobDeployModeInClusterClient captures enum value "in_cluster_client"
	SparkJobDeployModeInClusterClient SparkJobDeployMode = "in_cluster_client"
)

// for schema
var sparkJobDeployModeEnum []interface{}

func init() {
	var res []SparkJobDeployMode
	if err := json.Unmarshal([]byte(`["cluster","client","in_cluster_client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sparkJobDeployModeEnum = append(sparkJobDeployModeEnum, v)
	}
}

func (m SparkJobDeployMode) validateSparkJobDeployModeEnum(path, location string, value SparkJobDeployMode) error {
	if err := validate.EnumCase(path, location, value, sparkJobDeployModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this spark job deploy mode
func (m SparkJobDeployMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSparkJobDeployModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this spark job deploy mode based on context it is used
func (m SparkJobDeployMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
