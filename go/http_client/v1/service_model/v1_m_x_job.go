// Copyright 2018-2023 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1MXJob MXNet Job specification
//
// swagger:model v1MXJob
type V1MXJob struct {

	// optional clean pod policy section
	CleanPodPolicy *V1CleanPodPolicy `json:"cleanPodPolicy,omitempty"`

	// Optional component kind, should be equal to 'mx_job'
	Kind *string `json:"kind,omitempty"`

	// MXJob mode "MXTrain" and "MXTune".
	Mode *MXJobMode `json:"mode,omitempty"`

	// Scheduler replicas definition
	Scheduler *V1KFReplica `json:"scheduler,omitempty"`

	// optional scheduling policy section
	SchedulingPolicy *V1SchedulingPolicy `json:"schedulingPolicy,omitempty"`

	// Server replicas definition
	Server *V1KFReplica `json:"server,omitempty"`

	// Tuner replicas definition
	Tuner *V1KFReplica `json:"tuner,omitempty"`

	// TunerServer replicas definition
	TunerServer *V1KFReplica `json:"tuner_server,omitempty"`

	// TunerTracker replicas definition
	TunerTracker *V1KFReplica `json:"tuner_tracker,omitempty"`

	// Worker replicas definition
	Worker *V1KFReplica `json:"worker,omitempty"`
}

// Validate validates this v1 m x job
func (m *V1MXJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanPodPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTuner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunerServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunerTracker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MXJob) validateCleanPodPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.CleanPodPolicy) { // not required
		return nil
	}

	if m.CleanPodPolicy != nil {
		if err := m.CleanPodPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanPodPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanPodPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateScheduler(formats strfmt.Registry) error {
	if swag.IsZero(m.Scheduler) { // not required
		return nil
	}

	if m.Scheduler != nil {
		if err := m.Scheduler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduler")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateSchedulingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedulingPolicy) { // not required
		return nil
	}

	if m.SchedulingPolicy != nil {
		if err := m.SchedulingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateServer(formats strfmt.Registry) error {
	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateTuner(formats strfmt.Registry) error {
	if swag.IsZero(m.Tuner) { // not required
		return nil
	}

	if m.Tuner != nil {
		if err := m.Tuner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateTunerServer(formats strfmt.Registry) error {
	if swag.IsZero(m.TunerServer) { // not required
		return nil
	}

	if m.TunerServer != nil {
		if err := m.TunerServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner_server")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateTunerTracker(formats strfmt.Registry) error {
	if swag.IsZero(m.TunerTracker) { // not required
		return nil
	}

	if m.TunerTracker != nil {
		if err := m.TunerTracker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner_tracker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner_tracker")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) validateWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.Worker) { // not required
		return nil
	}

	if m.Worker != nil {
		if err := m.Worker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("worker")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 m x job based on the context it is used
func (m *V1MXJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCleanPodPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedulingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTuner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTunerServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTunerTracker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MXJob) contextValidateCleanPodPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.CleanPodPolicy != nil {
		if err := m.CleanPodPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanPodPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanPodPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if m.Mode != nil {
		if err := m.Mode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateScheduler(ctx context.Context, formats strfmt.Registry) error {

	if m.Scheduler != nil {
		if err := m.Scheduler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduler")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateSchedulingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SchedulingPolicy != nil {
		if err := m.SchedulingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if m.Server != nil {
		if err := m.Server.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateTuner(ctx context.Context, formats strfmt.Registry) error {

	if m.Tuner != nil {
		if err := m.Tuner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateTunerServer(ctx context.Context, formats strfmt.Registry) error {

	if m.TunerServer != nil {
		if err := m.TunerServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner_server")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateTunerTracker(ctx context.Context, formats strfmt.Registry) error {

	if m.TunerTracker != nil {
		if err := m.TunerTracker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuner_tracker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tuner_tracker")
			}
			return err
		}
	}

	return nil
}

func (m *V1MXJob) contextValidateWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.Worker != nil {
		if err := m.Worker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("worker")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MXJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MXJob) UnmarshalBinary(b []byte) error {
	var res V1MXJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
