// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1EventSpanKind Curve kind
//
// swagger:model v1EventSpanKind
type V1EventSpanKind string

func NewV1EventSpanKind(value V1EventSpanKind) *V1EventSpanKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1EventSpanKind.
func (m V1EventSpanKind) Pointer() *V1EventSpanKind {
	return &m
}

const (

	// V1EventSpanKindLLM captures enum value "LLM"
	V1EventSpanKindLLM V1EventSpanKind = "LLM"

	// V1EventSpanKindCHAIN captures enum value "CHAIN"
	V1EventSpanKindCHAIN V1EventSpanKind = "CHAIN"

	// V1EventSpanKindAGENT captures enum value "AGENT"
	V1EventSpanKindAGENT V1EventSpanKind = "AGENT"

	// V1EventSpanKindTOOL captures enum value "TOOL"
	V1EventSpanKindTOOL V1EventSpanKind = "TOOL"
)

// for schema
var v1EventSpanKindEnum []interface{}

func init() {
	var res []V1EventSpanKind
	if err := json.Unmarshal([]byte(`["LLM","CHAIN","AGENT","TOOL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1EventSpanKindEnum = append(v1EventSpanKindEnum, v)
	}
}

func (m V1EventSpanKind) validateV1EventSpanKindEnum(path, location string, value V1EventSpanKind) error {
	if err := validate.EnumCase(path, location, value, v1EventSpanKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 event span kind
func (m V1EventSpanKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1EventSpanKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 event span kind based on context it is used
func (m V1EventSpanKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
