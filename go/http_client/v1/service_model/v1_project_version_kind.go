// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ProjectVersionKind v1 project version kind
//
// swagger:model v1ProjectVersionKind
type V1ProjectVersionKind string

func NewV1ProjectVersionKind(value V1ProjectVersionKind) *V1ProjectVersionKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ProjectVersionKind.
func (m V1ProjectVersionKind) Pointer() *V1ProjectVersionKind {
	return &m
}

const (

	// V1ProjectVersionKindComponent captures enum value "component"
	V1ProjectVersionKindComponent V1ProjectVersionKind = "component"

	// V1ProjectVersionKindModel captures enum value "model"
	V1ProjectVersionKindModel V1ProjectVersionKind = "model"

	// V1ProjectVersionKindArtifact captures enum value "artifact"
	V1ProjectVersionKindArtifact V1ProjectVersionKind = "artifact"
)

// for schema
var v1ProjectVersionKindEnum []interface{}

func init() {
	var res []V1ProjectVersionKind
	if err := json.Unmarshal([]byte(`["component","model","artifact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ProjectVersionKindEnum = append(v1ProjectVersionKindEnum, v)
	}
}

func (m V1ProjectVersionKind) validateV1ProjectVersionKindEnum(path, location string, value V1ProjectVersionKind) error {
	if err := validate.EnumCase(path, location, value, v1ProjectVersionKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 project version kind
func (m V1ProjectVersionKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ProjectVersionKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 project version kind based on context it is used
func (m V1ProjectVersionKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
