// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ComponentVersion component hub specification
//
// swagger:model v1ComponentVersion
type V1ComponentVersion struct {

	// The Component body content
	Content string `json:"content,omitempty"`

	// Optional time when the entity was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Optional description
	Description string `json:"description,omitempty"`

	// Current live state
	LiveState int32 `json:"live_state,omitempty"`

	// Optional component name, should be a valid fully qualified value: name[:version]
	Name string `json:"name,omitempty"`

	// Current user's role in this (org/teams)/hub/version
	Role string `json:"role,omitempty"`

	// Optional latest stage of this entity
	Stage *V1Stages `json:"stage,omitempty"`

	// The status conditions timeline
	StageConditions []*V1StageCondition `json:"stage_conditions"`

	// Optional tags of this entity
	Tags []string `json:"tags"`

	// Optional last time the entity was updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this v1 component version
func (m *V1ComponentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStageConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ComponentVersion) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1ComponentVersion) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	if m.Stage != nil {
		if err := m.Stage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stage")
			}
			return err
		}
	}

	return nil
}

func (m *V1ComponentVersion) validateStageConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.StageConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.StageConditions); i++ {
		if swag.IsZero(m.StageConditions[i]) { // not required
			continue
		}

		if m.StageConditions[i] != nil {
			if err := m.StageConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stage_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stage_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ComponentVersion) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 component version based on the context it is used
func (m *V1ComponentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStageConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ComponentVersion) contextValidateStage(ctx context.Context, formats strfmt.Registry) error {

	if m.Stage != nil {
		if err := m.Stage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stage")
			}
			return err
		}
	}

	return nil
}

func (m *V1ComponentVersion) contextValidateStageConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StageConditions); i++ {

		if m.StageConditions[i] != nil {
			if err := m.StageConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stage_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stage_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ComponentVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ComponentVersion) UnmarshalBinary(b []byte) error {
	var res V1ComponentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
