// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1EarlyStopping All Schemas message
//
// swagger:model v1EarlyStopping
type V1EarlyStopping struct {

	// diff
	Diff *V1DiffStoppingPolicy `json:"diff,omitempty"`

	// failure
	Failure *V1FailureEarlyStopping `json:"failure,omitempty"`

	// median
	Median *V1MedianStoppingPolicy `json:"median,omitempty"`

	// metric
	Metric *V1MetricEarlyStopping `json:"metric,omitempty"`

	// truncation
	Truncation *V1TruncationStoppingPolicy `json:"truncation,omitempty"`
}

// Validate validates this v1 early stopping
func (m *V1EarlyStopping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedian(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTruncation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EarlyStopping) validateDiff(formats strfmt.Registry) error {
	if swag.IsZero(m.Diff) { // not required
		return nil
	}

	if m.Diff != nil {
		if err := m.Diff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diff")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diff")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) validateFailure(formats strfmt.Registry) error {
	if swag.IsZero(m.Failure) { // not required
		return nil
	}

	if m.Failure != nil {
		if err := m.Failure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) validateMedian(formats strfmt.Registry) error {
	if swag.IsZero(m.Median) { // not required
		return nil
	}

	if m.Median != nil {
		if err := m.Median.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("median")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("median")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) validateMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) validateTruncation(formats strfmt.Registry) error {
	if swag.IsZero(m.Truncation) { // not required
		return nil
	}

	if m.Truncation != nil {
		if err := m.Truncation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("truncation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("truncation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 early stopping based on the context it is used
func (m *V1EarlyStopping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMedian(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTruncation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EarlyStopping) contextValidateDiff(ctx context.Context, formats strfmt.Registry) error {

	if m.Diff != nil {

		if swag.IsZero(m.Diff) { // not required
			return nil
		}

		if err := m.Diff.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diff")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diff")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) contextValidateFailure(ctx context.Context, formats strfmt.Registry) error {

	if m.Failure != nil {

		if swag.IsZero(m.Failure) { // not required
			return nil
		}

		if err := m.Failure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) contextValidateMedian(ctx context.Context, formats strfmt.Registry) error {

	if m.Median != nil {

		if swag.IsZero(m.Median) { // not required
			return nil
		}

		if err := m.Median.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("median")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("median")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) contextValidateMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.Metric != nil {

		if swag.IsZero(m.Metric) { // not required
			return nil
		}

		if err := m.Metric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStopping) contextValidateTruncation(ctx context.Context, formats strfmt.Registry) error {

	if m.Truncation != nil {

		if swag.IsZero(m.Truncation) { // not required
			return nil
		}

		if err := m.Truncation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("truncation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("truncation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EarlyStopping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EarlyStopping) UnmarshalBinary(b []byte) error {
	var res V1EarlyStopping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
