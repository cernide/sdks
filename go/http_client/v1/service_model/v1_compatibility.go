// Copyright 2018-2022 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Compatibility v1 compatibility
//
// swagger:model v1Compatibility
type V1Compatibility struct {

	// agent
	Agent *V1Version `json:"agent,omitempty"`

	// cli
	Cli *V1Version `json:"cli,omitempty"`

	// platform
	Platform *V1Version `json:"platform,omitempty"`

	// ui
	UI *V1Version `json:"ui,omitempty"`
}

// Validate validates this v1 compatibility
func (m *V1Compatibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCli(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Compatibility) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) validateCli(formats strfmt.Registry) error {
	if swag.IsZero(m.Cli) { // not required
		return nil
	}

	if m.Cli != nil {
		if err := m.Cli.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cli")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cli")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) validatePlatform(formats strfmt.Registry) error {
	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	if m.Platform != nil {
		if err := m.Platform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) validateUI(formats strfmt.Registry) error {
	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 compatibility based on the context it is used
func (m *V1Compatibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCli(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Compatibility) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) contextValidateCli(ctx context.Context, formats strfmt.Registry) error {

	if m.Cli != nil {
		if err := m.Cli.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cli")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cli")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) contextValidatePlatform(ctx context.Context, formats strfmt.Registry) error {

	if m.Platform != nil {
		if err := m.Platform.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform")
			}
			return err
		}
	}

	return nil
}

func (m *V1Compatibility) contextValidateUI(ctx context.Context, formats strfmt.Registry) error {

	if m.UI != nil {
		if err := m.UI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Compatibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Compatibility) UnmarshalBinary(b []byte) error {
	var res V1Compatibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
