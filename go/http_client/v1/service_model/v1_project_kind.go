// Copyright 2018-2021 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ProjectKind v1 project kind
//
// swagger:model v1ProjectKind
type V1ProjectKind string

func NewV1ProjectKind(value V1ProjectKind) *V1ProjectKind {
	v := value
	return &v
}

const (

	// V1ProjectKindAny captures enum value "any"
	V1ProjectKindAny V1ProjectKind = "any"

	// V1ProjectKindHub captures enum value "hub"
	V1ProjectKindHub V1ProjectKind = "hub"

	// V1ProjectKindRegistry captures enum value "registry"
	V1ProjectKindRegistry V1ProjectKind = "registry"

	// V1ProjectKindData captures enum value "data"
	V1ProjectKindData V1ProjectKind = "data"
)

// for schema
var v1ProjectKindEnum []interface{}

func init() {
	var res []V1ProjectKind
	if err := json.Unmarshal([]byte(`["any","hub","registry","data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ProjectKindEnum = append(v1ProjectKindEnum, v)
	}
}

func (m V1ProjectKind) validateV1ProjectKindEnum(path, location string, value V1ProjectKind) error {
	if err := validate.EnumCase(path, location, value, v1ProjectKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 project kind
func (m V1ProjectKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ProjectKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 project kind based on context it is used
func (m V1ProjectKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
